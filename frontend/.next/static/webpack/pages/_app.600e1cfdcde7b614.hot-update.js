"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "(pages-dir-browser)/./utils/web3.js":
/*!***********************!*\
  !*** ./utils/web3.js ***!
  \***********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DISASTER_TYPES: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES),\n/* harmony export */   URGENCY_LEVELS: () => (/* reexport safe */ _constants__WEBPACK_IMPORTED_MODULE_8__.URGENCY_LEVELS),\n/* harmony export */   checkPreviousConnection: () => (/* binding */ checkPreviousConnection),\n/* harmony export */   checkWeb3Connection: () => (/* binding */ checkWeb3Connection),\n/* harmony export */   connectWallet: () => (/* binding */ connectWallet),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   donate: () => (/* binding */ donate),\n/* harmony export */   getContractAddresses: () => (/* binding */ getContractAddresses),\n/* harmony export */   getCurrentAccount: () => (/* binding */ getCurrentAccount),\n/* harmony export */   getDashboardStats: () => (/* binding */ getDashboardStats),\n/* harmony export */   getMilestones: () => (/* binding */ getMilestones),\n/* harmony export */   getNGODetails: () => (/* binding */ getNGODetails),\n/* harmony export */   getReliefCampaign: () => (/* binding */ getReliefCampaign),\n/* harmony export */   getReliefCampaigns: () => (/* binding */ getReliefCampaigns),\n/* harmony export */   getVerificationStatus: () => (/* binding */ getVerificationStatus),\n/* harmony export */   initWeb3: () => (/* binding */ initWeb3),\n/* harmony export */   isNGOVerified: () => (/* binding */ isNGOVerified),\n/* harmony export */   verifyIPFSDocument: () => (/* binding */ verifyIPFSDocument)\n/* harmony export */ });\n/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3 */ \"(pages-dir-browser)/./node_modules/web3/lib/esm/index.js\");\n/* harmony import */ var _contracts_D3RProtocol_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contracts/D3RProtocol.json */ \"(pages-dir-browser)/./contracts/D3RProtocol.json\");\n/* harmony import */ var _contracts_MilestoneFunding_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../contracts/MilestoneFunding.json */ \"(pages-dir-browser)/./contracts/MilestoneFunding.json\");\n/* harmony import */ var _contracts_NGORegistry_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../contracts/NGORegistry.json */ \"(pages-dir-browser)/./contracts/NGORegistry.json\");\n/* harmony import */ var _contracts_ChainlinkDisasterOracle_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../contracts/ChainlinkDisasterOracle.json */ \"(pages-dir-browser)/./contracts/ChainlinkDisasterOracle.json\");\n/* harmony import */ var _contracts_IPFSVerifier_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../contracts/IPFSVerifier.json */ \"(pages-dir-browser)/./contracts/IPFSVerifier.json\");\n/* harmony import */ var _contracts_FundPool_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../contracts/FundPool.json */ \"(pages-dir-browser)/./contracts/FundPool.json\");\n/* harmony import */ var _contracts_DonationTracker_json__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../contracts/DonationTracker.json */ \"(pages-dir-browser)/./contracts/DonationTracker.json\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./constants */ \"(pages-dir-browser)/./utils/constants.js\");\n/* harmony import */ var _demoData__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./demoData */ \"(pages-dir-browser)/./utils/demoData.js\");\n\n\n\n\n\n\n\n\n// Import constants\n\n// Import demo data without creating circular dependency\n\nlet web3;\nlet d3rProtocol;\nlet milestoneFunding;\nlet ngoRegistry;\nlet disasterOracle;\nlet ipfsVerifier;\nlet fundPool;\nlet donationTracker;\n// Re-export constants for convenience\n\n// Contract addresses - use from constants\nconst D3R_PROTOCOL_ADDRESS = _constants__WEBPACK_IMPORTED_MODULE_8__.CONTRACT_ADDRESSES.D3R_PROTOCOL;\nconst MILESTONE_FUNDING_ADDRESS = _constants__WEBPACK_IMPORTED_MODULE_8__.CONTRACT_ADDRESSES.MILESTONE_FUNDING;\nconst NGO_REGISTRY_ADDRESS = _constants__WEBPACK_IMPORTED_MODULE_8__.CONTRACT_ADDRESSES.NGO_REGISTRY;\nconst DISASTER_ORACLE_ADDRESS = _constants__WEBPACK_IMPORTED_MODULE_8__.CONTRACT_ADDRESSES.DISASTER_ORACLE;\nconst IPFS_VERIFIER_ADDRESS = _constants__WEBPACK_IMPORTED_MODULE_8__.CONTRACT_ADDRESSES.IPFS_VERIFIER;\nconst FUND_POOL_ADDRESS = _constants__WEBPACK_IMPORTED_MODULE_8__.CONTRACT_ADDRESSES.FUND_POOL;\nconst DONATION_TRACKER_ADDRESS = _constants__WEBPACK_IMPORTED_MODULE_8__.CONTRACT_ADDRESSES.DONATION_TRACKER;\n// Initialize Web3 and contract instances\nconst initWeb3 = async function() {\n    let forceConnect = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n    try {\n        let accounts = [];\n        // Check if we're in a browser and if ethereum is injected\n        if ( true && window.ethereum) {\n            console.log(\"Found window.ethereum, attempting to connect\");\n            try {\n                // Request account access if needed or if force connect is true\n                if (forceConnect) {\n                    accounts = await window.ethereum.request({\n                        method: 'eth_requestAccounts'\n                    });\n                    console.log(\"Forced connect accounts:\", accounts);\n                } else {\n                    // Just get accounts without prompting\n                    accounts = await window.ethereum.request({\n                        method: 'eth_accounts'\n                    });\n                    console.log(\"Current accounts:\", accounts);\n                }\n                // Create Web3 instance\n                web3 = new web3__WEBPACK_IMPORTED_MODULE_0__[\"default\"](window.ethereum);\n                // Set up event listeners for account/network changes if they don't exist\n                if (!window.ethereum._events || !window.ethereum._events.accountsChanged) {\n                    window.ethereum.on('accountsChanged', (newAccounts)=>{\n                        console.log('accountsChanged', newAccounts);\n                        // Dispatch a custom event that components can listen for\n                        window.dispatchEvent(new CustomEvent('walletAccountChanged', {\n                            detail: newAccounts\n                        }));\n                    });\n                    window.ethereum.on('chainChanged', (chainId)=>{\n                        console.log('chainChanged', chainId);\n                        window.dispatchEvent(new CustomEvent('walletChainChanged', {\n                            detail: chainId\n                        }));\n                    });\n                    window.ethereum.on('disconnect', (error)=>{\n                        console.log('disconnect', error);\n                        window.dispatchEvent(new CustomEvent('walletDisconnected'));\n                    });\n                }\n            } catch (error) {\n                console.error(\"Error requesting account access:\", error);\n            }\n        } else if ( true && window.web3) {\n            // Legacy support for older MetaMask/Web3 implementations\n            console.log(\"Found legacy web3\");\n            web3 = new web3__WEBPACK_IMPORTED_MODULE_0__[\"default\"](window.web3.currentProvider);\n            accounts = await web3.eth.getAccounts();\n        } else {\n            console.log(\"No Web3 wallet detected, using read-only provider\");\n            // Set up a read-only provider for non-wallet users\n            const provider = new web3__WEBPACK_IMPORTED_MODULE_0__[\"default\"].providers.HttpProvider(\"https://eth-sepolia.g.alchemy.com/v2/demo\");\n            web3 = new web3__WEBPACK_IMPORTED_MODULE_0__[\"default\"](provider);\n        }\n        // Initialize contract instances only if web3 is setup\n        if (web3) {\n            try {\n                d3rProtocol = new web3.eth.Contract(_contracts_D3RProtocol_json__WEBPACK_IMPORTED_MODULE_1__.abi, D3R_PROTOCOL_ADDRESS);\n                milestoneFunding = new web3.eth.Contract(_contracts_MilestoneFunding_json__WEBPACK_IMPORTED_MODULE_2__.abi, MILESTONE_FUNDING_ADDRESS);\n                ngoRegistry = new web3.eth.Contract(_contracts_NGORegistry_json__WEBPACK_IMPORTED_MODULE_3__.abi, NGO_REGISTRY_ADDRESS);\n                disasterOracle = new web3.eth.Contract(_contracts_ChainlinkDisasterOracle_json__WEBPACK_IMPORTED_MODULE_4__.abi, DISASTER_ORACLE_ADDRESS);\n                ipfsVerifier = new web3.eth.Contract(_contracts_IPFSVerifier_json__WEBPACK_IMPORTED_MODULE_5__.abi, IPFS_VERIFIER_ADDRESS);\n                fundPool = new web3.eth.Contract(_contracts_FundPool_json__WEBPACK_IMPORTED_MODULE_6__.abi, FUND_POOL_ADDRESS);\n                donationTracker = new web3.eth.Contract(_contracts_DonationTracker_json__WEBPACK_IMPORTED_MODULE_7__.abi, DONATION_TRACKER_ADDRESS);\n                window.web3 = web3; // Make web3 available globally for utility functions\n            } catch (contractError) {\n                console.error(\"Error initializing contracts:\", contractError);\n            }\n        }\n        return {\n            web3,\n            accounts,\n            connected: accounts.length > 0\n        };\n    } catch (error) {\n        console.error(\"Error initializing web3:\", error);\n        return {\n            web3: null,\n            accounts: [],\n            connected: false\n        };\n    }\n};\n// Check connection status\nconst checkWeb3Connection = async ()=>{\n    try {\n        const { web3, accounts } = await initWeb3();\n        if (!web3) {\n            return 'Web3 not available';\n        }\n        if (!accounts || accounts.length === 0) {\n            return 'Not connected to wallet';\n        }\n        const networkId = await web3.eth.net.getId();\n        const networkType = await web3.eth.net.getNetworkType();\n        return \"Connected to \".concat(accounts[0], \" on \").concat(networkType, \" (\").concat(networkId, \")\");\n    } catch (error) {\n        console.error(\"Connection check failed:\", error);\n        return \"Connection error: \".concat(error.message);\n    }\n};\n// Connect wallet explicitly (for connect button)\nconst connectWallet = async ()=>{\n    if ( true && window.ethereum) {\n        try {\n            // Force request account access with UI prompt\n            const result = await initWeb3(true);\n            if (!result.connected) {\n                return {\n                    success: false,\n                    error: \"User denied account access\"\n                };\n            }\n            // Check if we're on the right network\n            const networkId = await web3.eth.net.getId();\n            const networkType = await web3.eth.net.getNetworkType();\n            const expectedNetwork = \"1\" || 0;\n            const networkName = \"Ethereum Sepolia Testnet\" || 0;\n            if (networkId.toString() !== expectedNetwork) {\n                // Prompt user to switch networks\n                try {\n                    await window.ethereum.request({\n                        method: 'wallet_switchEthereumChain',\n                        params: [\n                            {\n                                chainId: \"0x\".concat(parseInt(expectedNetwork).toString(16))\n                            }\n                        ]\n                    });\n                } catch (switchError) {\n                    console.error(\"Failed to switch networks:\", switchError);\n                    return {\n                        success: false,\n                        error: \"Please switch to \".concat(networkName, \" in your wallet\")\n                    };\n                }\n            }\n            // Save connected status to localStorage\n            try {\n                localStorage.setItem('walletConnected', 'true');\n            } catch (e) {\n                console.warn('Failed to save connection state to localStorage:', e);\n            }\n            return {\n                success: true,\n                address: result.accounts[0],\n                networkId,\n                networkType\n            };\n        } catch (error) {\n            console.error(\"Failed to connect wallet:\", error);\n            return {\n                success: false,\n                error: error.message || \"Failed to connect wallet\"\n            };\n        }\n    } else {\n        return {\n            success: false,\n            error: \"No Ethereum wallet detected. Please install MetaMask.\"\n        };\n    }\n};\n// Get all active relief campaigns with verification status\nconst getReliefCampaigns = async function() {\n    let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    try {\n        // Check if we're in demo mode\n        if (true) {\n            const isDemoMode = localStorage.getItem('demoMode') === 'true';\n            if (isDemoMode) {\n                console.log(\"Using demo campaign data\");\n                return _demoData__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getDemoCampaigns(filters);\n            }\n        }\n        await initWeb3();\n        // Get project count\n        const projectCount = await milestoneFunding.methods.projectCount().call();\n        const campaigns = [];\n        // Load all projects\n        for(let i = 0; i < projectCount; i++){\n            try {\n                const projectDetails = await milestoneFunding.methods.getProjectDetails(i).call();\n                // Only include active projects\n                if (projectDetails.isActive) {\n                    var _metadata_location;\n                    // Try to get metadata about the disaster (could be stored in IPFS or as events)\n                    let metadata = {};\n                    try {\n                        // In a production environment, we would fetch metadata from IPFS or blockchain events\n                        // For now, we'll use placeholder data\n                        const disasterType = getRandomDisasterType(i);\n                        const disasterId = \"DS-\".concat(2023, \"-\").concat(1000 + i);\n                        metadata = {\n                            disasterType: disasterType,\n                            location: getLocationForDisasterType(disasterType),\n                            disasterId: disasterId,\n                            urgencyLevel: getUrgencyForDisasterType(disasterType)\n                        };\n                        // Try to get verification from the Oracle contract\n                        try {\n                            const verification = await disasterOracle.methods.getDisasterVerification(disasterId).call();\n                            metadata.verified = verification.verified;\n                            metadata.confidence = verification.confidence;\n                            metadata.source = verification.source || \"Chainlink Oracles\";\n                        } catch (verificationError) {\n                            console.log(\"Could not get verification for disaster \".concat(disasterId), verificationError);\n                            metadata.verified = i % 3 === 0; // For testing: make every third project verified\n                            metadata.confidence = metadata.verified ? 85 : 0;\n                            metadata.source = metadata.verified ? \"Chainlink Weather Data\" : \"\";\n                        }\n                    } catch (metadataError) {\n                        console.error(\"Error fetching metadata for project \".concat(i, \":\"), metadataError);\n                    }\n                    // Apply filters if provided\n                    if (filters.disasterType && metadata.disasterType !== filters.disasterType || filters.location && !((_metadata_location = metadata.location) === null || _metadata_location === void 0 ? void 0 : _metadata_location.toLowerCase().includes(filters.location.toLowerCase())) || filters.urgency > 0 && metadata.urgencyLevel !== parseInt(filters.urgency)) {\n                        continue; // Skip this campaign if it doesn't match filters\n                    }\n                    // Get milestone information\n                    const milestones = [];\n                    for(let j = 0; j < projectDetails.milestoneCount; j++){\n                        try {\n                            const milestone = await milestoneFunding.methods.getMilestoneDetails(i, j).call();\n                            milestones.push({\n                                ...milestone,\n                                id: j\n                            });\n                        } catch (milestoneError) {\n                            console.error(\"Error fetching milestone \".concat(j, \" for project \").concat(i, \":\"), milestoneError);\n                        }\n                    }\n                    // Get NGO details\n                    let ngoDetails = {\n                        name: \"Unknown NGO\"\n                    };\n                    try {\n                        ngoDetails = await ngoRegistry.methods.getNGODetails(projectDetails.ngoAddress).call();\n                    } catch (ngoError) {\n                        console.error(\"Error fetching NGO details for address \".concat(projectDetails.ngoAddress, \":\"), ngoError);\n                    }\n                    // Add campaign to the list\n                    campaigns.push({\n                        id: i,\n                        title: projectDetails.name,\n                        description: projectDetails.description,\n                        creator: projectDetails.ngoAddress,\n                        ngoName: ngoDetails.name || \"Unknown NGO\",\n                        currentAmount: projectDetails.releasedFunding,\n                        targetAmount: projectDetails.totalFunding,\n                        milestonesCompleted: parseInt(projectDetails.milestonesCompleted),\n                        milestoneCount: parseInt(projectDetails.milestoneCount),\n                        milestones: milestones,\n                        isActive: projectDetails.isActive,\n                        deadline: calculateDeadline(i),\n                        parsedMetadata: metadata\n                    });\n                }\n            } catch (projectError) {\n                console.error(\"Error loading project \".concat(i, \":\"), projectError);\n            }\n        }\n        return campaigns;\n    } catch (error) {\n        console.error(\"Error getting relief campaigns:\", error);\n        // Return demo data as fallback in case of error\n        return _demoData__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getDemoCampaigns(filters);\n    }\n};\n// Get a specific campaign by ID\nconst getReliefCampaign = async (id)=>{\n    // Check if we're in demo mode\n    if (true) {\n        const isDemoMode = localStorage.getItem('demoMode') === 'true';\n        if (isDemoMode) {\n            console.log(\"Using demo campaign data for ID:\", id);\n            return _demoData__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getDemoCampaign(id);\n        }\n    }\n    try {\n        const campaigns = await getReliefCampaigns();\n        return campaigns.find((c)=>c.id.toString() === (id === null || id === void 0 ? void 0 : id.toString()));\n    } catch (error) {\n        console.error(\"Error getting campaign with ID \".concat(id, \":\"), error);\n        return _demoData__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getDemoCampaign(id);\n    }\n};\n// Get milestones for a campaign\nconst getMilestones = async (campaignId)=>{\n    // Check if we're in demo mode\n    if (true) {\n        const isDemoMode = localStorage.getItem('demoMode') === 'true';\n        if (isDemoMode) {\n            console.log(\"Using demo milestone data\");\n            return _demoData__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getDemoMilestones(campaignId);\n        }\n    }\n    try {\n        const campaign = await getReliefCampaign(campaignId);\n        return (campaign === null || campaign === void 0 ? void 0 : campaign.milestones) || [];\n    } catch (error) {\n        console.error(\"Error getting milestones for campaign \".concat(campaignId, \":\"), error);\n        return _demoData__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getDemoMilestones(campaignId);\n    }\n};\n// Donate to a relief campaign\nconst donate = async (campaignId, amount)=>{\n    try {\n        const { web3, accounts } = await initWeb3();\n        if (!accounts || accounts.length === 0) {\n            throw new Error(\"No connected wallet accounts\");\n        }\n        const amountWei = web3.utils.toWei(amount.toString(), 'ether');\n        // Get the project details to check if it's active\n        const projectDetails = await milestoneFunding.methods.getProjectDetails(campaignId).call();\n        if (!projectDetails.isActive) {\n            throw new Error(\"This relief project is no longer active\");\n        }\n        // There's no direct donation method in MilestoneFunding in the contract code\n        // We'll use D3RProtocol to handle the donation\n        try {\n            // Try to donate via the main protocol contract\n            await d3rProtocol.methods.donateToProject(campaignId).send({\n                from: accounts[0],\n                value: amountWei\n            });\n        } catch (protocolError) {\n            console.error(\"D3RProtocol donation failed, trying direct transaction:\", protocolError);\n            // If the protocol doesn't have a donateToProject method, try a direct transaction\n            await web3.eth.sendTransaction({\n                from: accounts[0],\n                to: MILESTONE_FUNDING_ADDRESS,\n                value: amountWei,\n                data: web3.eth.abi.encodeFunctionCall({\n                    name: 'addFundsToProject',\n                    type: 'function',\n                    inputs: [\n                        {\n                            type: 'uint256',\n                            name: 'projectId'\n                        }\n                    ]\n                }, [\n                    campaignId\n                ])\n            });\n        }\n        return true;\n    } catch (error) {\n        console.error(\"Error donating to campaign:\", error);\n        throw error;\n    }\n};\n// Get verification status of a relief campaign\nconst getVerificationStatus = async (disasterId)=>{\n    // Check if we're in demo mode\n    if (true) {\n        const isDemoMode = localStorage.getItem('demoMode') === 'true';\n        if (isDemoMode) {\n            console.log(\"Using demo verification data\");\n            return _demoData__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getDemoVerification(disasterId);\n        }\n    }\n    try {\n        await initWeb3();\n        const verification = await disasterOracle.methods.getDisasterVerification(disasterId).call();\n        return verification;\n    } catch (error) {\n        console.error(\"Error getting verification status:\", error);\n        return _demoData__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getDemoVerification(disasterId);\n    }\n};\n// Get NGO details\nconst getNGODetails = async (ngoAddress)=>{\n    // Check if we're in demo mode\n    if (true) {\n        const isDemoMode = localStorage.getItem('demoMode') === 'true';\n        if (isDemoMode) {\n            console.log(\"Using demo NGO data\");\n            return _demoData__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getDemoNGO(ngoAddress);\n        }\n    }\n    try {\n        await initWeb3();\n        const ngoDetails = await ngoRegistry.methods.getNGODetails(ngoAddress).call();\n        return ngoDetails;\n    } catch (error) {\n        console.error(\"Error getting NGO details:\", error);\n        return _demoData__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getDemoNGO(ngoAddress);\n    }\n};\n// Get dashboard stats\nconst getDashboardStats = async ()=>{\n    try {\n        // Check if we're in demo mode\n        if (true) {\n            // This is a client-side check for demo mode\n            const isDemoMode = localStorage.getItem('demoMode') === 'true';\n            if (isDemoMode) {\n                console.log(\"Using demo stats data\");\n                return _demoData__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getDemoStats();\n            }\n        }\n        const { web3 } = await initWeb3();\n        // Get NGO count\n        let verifiedNGOsCount = 0;\n        try {\n            verifiedNGOsCount = await ngoRegistry.methods.getVerifiedNGOsCount().call();\n        } catch (ngoError) {\n            console.error(\"Error getting verified NGO count:\", ngoError);\n        }\n        // Get project count and calculate total funding and people helped\n        let projectCount = 0;\n        try {\n            projectCount = await milestoneFunding.methods.projectCount().call();\n        } catch (projectError) {\n            console.error(\"Error getting project count:\", projectError);\n        }\n        // Safely create a BigNumber (if web3.utils.toBN isn't available, use standard string handling)\n        let totalDonations = \"0\";\n        let totalDonationsBN;\n        try {\n            // Check if web3.utils has the toBN function\n            if (web3 && web3.utils && typeof web3.utils.toBN === 'function') {\n                totalDonationsBN = web3.utils.toBN(\"0\");\n            } else {\n                // Fallback to string-based handling\n                totalDonations = \"0\";\n            }\n        } catch (error) {\n            console.error(\"Error with BigNumber handling:\", error);\n            totalDonations = \"0\";\n        }\n        let activeCampaigns = 0;\n        let totalPeopleHelped = 0;\n        for(let i = 0; i < projectCount; i++){\n            try {\n                const projectDetails = await milestoneFunding.methods.getProjectDetails(i).call();\n                // Handle the total donations amount safely\n                try {\n                    if (totalDonationsBN) {\n                        // Use BN addition if available\n                        totalDonationsBN = totalDonationsBN.add(web3.utils.toBN(projectDetails.totalFunding));\n                    } else {\n                        // Fallback to simple string/number handling\n                        const fundingInEther = web3 && web3.utils ? web3.utils.fromWei(projectDetails.totalFunding, 'ether') : parseFloat(projectDetails.totalFunding) / 1e18;\n                        totalDonations = (parseFloat(totalDonations) + parseFloat(fundingInEther)).toString();\n                    }\n                } catch (bnError) {\n                    console.error(\"Error adding to donation total:\", bnError);\n                    // Fallback to simple addition\n                    totalDonations = (parseFloat(totalDonations) + parseFloat(projectDetails.totalFunding) / 1e18).toFixed(4);\n                }\n                if (projectDetails.isActive) {\n                    activeCampaigns++;\n                    // In a real scenario, you'd have a way to track people helped per project\n                    // For now, use a formula based on project funding and milestones\n                    const totalFundingEth = web3 && web3.utils ? parseFloat(web3.utils.fromWei(projectDetails.totalFunding, 'ether')) : parseFloat(projectDetails.totalFunding) / 1e18;\n                    const peopleHelpedEstimate = Math.floor(totalFundingEth * 150);\n                    totalPeopleHelped += peopleHelpedEstimate;\n                }\n            } catch (error) {\n                console.error(\"Error getting details for project \".concat(i, \":\"), error);\n            }\n        }\n        // Format the final totalDonations value\n        let formattedDonations;\n        if (totalDonationsBN) {\n            formattedDonations = web3.utils.fromWei(totalDonationsBN, 'ether');\n        } else {\n            // If we've been tracking in ether already, use that value\n            formattedDonations = totalDonations;\n        }\n        return {\n            totalDonations: formattedDonations,\n            activeCampaigns,\n            peopleHelped: totalPeopleHelped,\n            verifiedNGOs: parseInt(verifiedNGOsCount)\n        };\n    } catch (error) {\n        console.error(\"Error getting dashboard stats:\", error);\n        // In case of error, return demo data as fallback\n        return _demoData__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getDemoStats();\n    }\n};\n// Helper functions for generating test data\nfunction getRandomDisasterType(seed) {\n    const types = Object.values(_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES);\n    return types[seed % types.length];\n}\nfunction getLocationForDisasterType(disasterType) {\n    const locations = {\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.EARTHQUAKE]: \"Port-au-Prince, Haiti\",\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.HURRICANE]: \"New Orleans, USA\",\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.FLOOD]: \"Kerala, India\",\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.WILDFIRE]: \"California, USA\",\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.DROUGHT]: \"Nairobi, Kenya\",\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.TSUNAMI]: \"Phuket, Thailand\",\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.VOLCANIC_ERUPTION]: \"Bali, Indonesia\",\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.PANDEMIC]: \"Global Response\",\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.OTHER]: \"Multiple Regions\"\n    };\n    return locations[disasterType] || \"Unknown Location\";\n}\nfunction getUrgencyForDisasterType(disasterType) {\n    const urgencies = {\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.EARTHQUAKE]: 5,\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.HURRICANE]: 4,\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.FLOOD]: 4,\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.WILDFIRE]: 3,\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.DROUGHT]: 2,\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.TSUNAMI]: 5,\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.VOLCANIC_ERUPTION]: 3,\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.PANDEMIC]: 4,\n        [_constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES.OTHER]: 3\n    };\n    return urgencies[disasterType] || 3;\n}\nfunction calculateDeadline(projectId) {\n    // Create deterministic but varied deadlines\n    const now = Math.floor(Date.now() / 1000);\n    const daysFromNow = 10 + projectId * 5 % 60; // Between 10 and 70 days\n    return now + daysFromNow * 24 * 60 * 60;\n}\n// Check if an NGO is verified\nconst isNGOVerified = async (ngoAddress)=>{\n    try {\n        await initWeb3();\n        const isVerified = await ngoRegistry.methods.isVerified(ngoAddress).call();\n        return isVerified;\n    } catch (error) {\n        console.error(\"Error checking if NGO is verified:\", error);\n        return false;\n    }\n};\n// Verify document on IPFS\nconst verifyIPFSDocument = async (cid)=>{\n    try {\n        const { accounts } = await initWeb3();\n        await ipfsVerifier.methods.verifyDocument(cid).send({\n            from: accounts[0]\n        });\n        return true;\n    } catch (error) {\n        console.error(\"Error verifying IPFS document:\", error);\n        throw error;\n    }\n};\n// Get contract addresses for frontend display\nconst getContractAddresses = ()=>{\n    return _constants__WEBPACK_IMPORTED_MODULE_8__.CONTRACT_ADDRESSES;\n};\n// Check if wallet was previously connected\nconst checkPreviousConnection = async ()=>{\n    try {\n        // Check localStorage for previous connection\n        const wasConnected = localStorage.getItem('walletConnected') === 'true';\n        if (wasConnected) {\n            // Try to reconnect silently\n            const { connected, accounts } = await initWeb3(false);\n            if (connected) {\n                return {\n                    connected,\n                    address: accounts[0]\n                };\n            }\n        }\n        return {\n            connected: false\n        };\n    } catch (e) {\n        console.warn('Error checking previous connection:', e);\n        return {\n            connected: false\n        };\n    }\n};\n// Add the missing getCurrentAccount function\nconst getCurrentAccount = async ()=>{\n    try {\n        const { web3, accounts } = await initWeb3(false);\n        if (accounts && accounts.length > 0) {\n            return accounts[0];\n        }\n        return null;\n    } catch (error) {\n        console.error(\"Error getting current account:\", error);\n        return null;\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    initWeb3,\n    getReliefCampaigns,\n    getReliefCampaign,\n    getMilestones,\n    donate,\n    getVerificationStatus,\n    getNGODetails,\n    getDashboardStats,\n    isNGOVerified,\n    verifyIPFSDocument,\n    getContractAddresses,\n    DISASTER_TYPES: _constants__WEBPACK_IMPORTED_MODULE_8__.DISASTER_TYPES,\n    URGENCY_LEVELS: _constants__WEBPACK_IMPORTED_MODULE_8__.URGENCY_LEVELS,\n    checkWeb3Connection,\n    connectWallet,\n    getCurrentAccount\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./utils/web3.js\n"));

/***/ })

});