"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "(pages-dir-browser)/./utils/web3.js":
/*!***********************!*\
  !*** ./utils/web3.js ***!
  \***********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DISASTER_TYPES: () => (/* binding */ DISASTER_TYPES),\n/* harmony export */   URGENCY_LEVELS: () => (/* binding */ URGENCY_LEVELS),\n/* harmony export */   checkPreviousConnection: () => (/* binding */ checkPreviousConnection),\n/* harmony export */   checkWeb3Connection: () => (/* binding */ checkWeb3Connection),\n/* harmony export */   connectWallet: () => (/* binding */ connectWallet),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   donate: () => (/* binding */ donate),\n/* harmony export */   getContractAddresses: () => (/* binding */ getContractAddresses),\n/* harmony export */   getDashboardStats: () => (/* binding */ getDashboardStats),\n/* harmony export */   getNGODetails: () => (/* binding */ getNGODetails),\n/* harmony export */   getReliefCampaigns: () => (/* binding */ getReliefCampaigns),\n/* harmony export */   getVerificationStatus: () => (/* binding */ getVerificationStatus),\n/* harmony export */   initWeb3: () => (/* binding */ initWeb3),\n/* harmony export */   isNGOVerified: () => (/* binding */ isNGOVerified),\n/* harmony export */   verifyIPFSDocument: () => (/* binding */ verifyIPFSDocument)\n/* harmony export */ });\n/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3 */ \"(pages-dir-browser)/./node_modules/web3/lib/esm/index.js\");\n/* harmony import */ var _contracts_D3RProtocol_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contracts/D3RProtocol.json */ \"(pages-dir-browser)/./contracts/D3RProtocol.json\");\n/* harmony import */ var _contracts_MilestoneFunding_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../contracts/MilestoneFunding.json */ \"(pages-dir-browser)/./contracts/MilestoneFunding.json\");\n/* harmony import */ var _contracts_NGORegistry_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../contracts/NGORegistry.json */ \"(pages-dir-browser)/./contracts/NGORegistry.json\");\n/* harmony import */ var _contracts_ChainlinkDisasterOracle_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../contracts/ChainlinkDisasterOracle.json */ \"(pages-dir-browser)/./contracts/ChainlinkDisasterOracle.json\");\n/* harmony import */ var _contracts_IPFSVerifier_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../contracts/IPFSVerifier.json */ \"(pages-dir-browser)/./contracts/IPFSVerifier.json\");\n/* harmony import */ var _contracts_FundPool_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../contracts/FundPool.json */ \"(pages-dir-browser)/./contracts/FundPool.json\");\n/* harmony import */ var _contracts_DonationTracker_json__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../contracts/DonationTracker.json */ \"(pages-dir-browser)/./contracts/DonationTracker.json\");\n\n\n\n\n\n\n\n\nlet web3;\nlet d3rProtocol;\nlet milestoneFunding;\nlet ngoRegistry;\nlet disasterOracle;\nlet ipfsVerifier;\nlet fundPool;\nlet donationTracker;\n// Contract addresses - deployed contract addresses\nconst D3R_PROTOCOL_ADDRESS = '0xB0C04bF81c2D64cC5Ae4CCeaFe6906D391476304';\nconst MILESTONE_FUNDING_ADDRESS = '0xD09c0b1677107e25B78271dA70295580Bf8BEA52';\nconst NGO_REGISTRY_ADDRESS = '0x8e675e5C8efF2398D70eeeE62Bd85AB8084b8A01';\nconst DISASTER_ORACLE_ADDRESS = '0x109457d4c8501174f774339E4B37635e3f818C94';\nconst IPFS_VERIFIER_ADDRESS = '0x4DF627FCDf639D6a4dc420924Df6709e404493c4';\nconst FUND_POOL_ADDRESS = '0x52146d464e5DD3a7046940b85231007385AB3105';\nconst DONATION_TRACKER_ADDRESS = '0x97154aCFa6f5E85494D0EFd2332368b13b2Da8dc';\n// Disaster types defined in the system\nconst DISASTER_TYPES = {\n    EARTHQUAKE: 'Earthquake',\n    HURRICANE: 'Hurricane',\n    FLOOD: 'Flood',\n    WILDFIRE: 'Wildfire',\n    DROUGHT: 'Drought',\n    TSUNAMI: 'Tsunami',\n    VOLCANIC_ERUPTION: 'Volcanic Eruption',\n    PANDEMIC: 'Pandemic',\n    OTHER: 'Other'\n};\n// Urgency levels defined in the system\nconst URGENCY_LEVELS = {\n    'Critical (Level 5)': 5,\n    'High (Level 4)': 4,\n    'Medium (Level 3)': 3,\n    'Low (Level 2)': 2,\n    'Recovery (Level 1)': 1\n};\n// Initialize Web3 and contract instances\nconst initWeb3 = async function() {\n    let forceConnect = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n    try {\n        let accounts = [];\n        // Check if we're in a browser and if ethereum is injected\n        if ( true && window.ethereum) {\n            console.log(\"Found window.ethereum, attempting to connect\");\n            try {\n                // Request account access if needed or if force connect is true\n                if (forceConnect) {\n                    accounts = await window.ethereum.request({\n                        method: 'eth_requestAccounts'\n                    });\n                    console.log(\"Forced connect accounts:\", accounts);\n                } else {\n                    // Just get accounts without prompting\n                    accounts = await window.ethereum.request({\n                        method: 'eth_accounts'\n                    });\n                    console.log(\"Current accounts:\", accounts);\n                }\n                // Create Web3 instance\n                web3 = new web3__WEBPACK_IMPORTED_MODULE_0__[\"default\"](window.ethereum);\n                // Set up event listeners for account/network changes if they don't exist\n                if (!window.ethereum._events || !window.ethereum._events.accountsChanged) {\n                    window.ethereum.on('accountsChanged', (newAccounts)=>{\n                        console.log('accountsChanged', newAccounts);\n                        // Dispatch a custom event that components can listen for\n                        window.dispatchEvent(new CustomEvent('walletAccountChanged', {\n                            detail: newAccounts\n                        }));\n                    });\n                    window.ethereum.on('chainChanged', (chainId)=>{\n                        console.log('chainChanged', chainId);\n                        window.dispatchEvent(new CustomEvent('walletChainChanged', {\n                            detail: chainId\n                        }));\n                    });\n                    window.ethereum.on('disconnect', (error)=>{\n                        console.log('disconnect', error);\n                        window.dispatchEvent(new CustomEvent('walletDisconnected'));\n                    });\n                }\n            } catch (error) {\n                console.error(\"Error requesting account access:\", error);\n            }\n        } else if ( true && window.web3) {\n            // Legacy support for older MetaMask/Web3 implementations\n            console.log(\"Found legacy web3\");\n            web3 = new web3__WEBPACK_IMPORTED_MODULE_0__[\"default\"](window.web3.currentProvider);\n            accounts = await web3.eth.getAccounts();\n        } else {\n            console.log(\"No Web3 wallet detected, using read-only provider\");\n            // Set up a read-only provider for non-wallet users\n            const provider = new web3__WEBPACK_IMPORTED_MODULE_0__[\"default\"].providers.HttpProvider(\"https://eth-sepolia.g.alchemy.com/v2/demo\");\n            web3 = new web3__WEBPACK_IMPORTED_MODULE_0__[\"default\"](provider);\n        }\n        // Initialize contract instances only if web3 is setup\n        if (web3) {\n            try {\n                d3rProtocol = new web3.eth.Contract(_contracts_D3RProtocol_json__WEBPACK_IMPORTED_MODULE_1__.abi, D3R_PROTOCOL_ADDRESS);\n                milestoneFunding = new web3.eth.Contract(_contracts_MilestoneFunding_json__WEBPACK_IMPORTED_MODULE_2__.abi, MILESTONE_FUNDING_ADDRESS);\n                ngoRegistry = new web3.eth.Contract(_contracts_NGORegistry_json__WEBPACK_IMPORTED_MODULE_3__.abi, NGO_REGISTRY_ADDRESS);\n                disasterOracle = new web3.eth.Contract(_contracts_ChainlinkDisasterOracle_json__WEBPACK_IMPORTED_MODULE_4__.abi, DISASTER_ORACLE_ADDRESS);\n                ipfsVerifier = new web3.eth.Contract(_contracts_IPFSVerifier_json__WEBPACK_IMPORTED_MODULE_5__.abi, IPFS_VERIFIER_ADDRESS);\n                fundPool = new web3.eth.Contract(_contracts_FundPool_json__WEBPACK_IMPORTED_MODULE_6__.abi, FUND_POOL_ADDRESS);\n                donationTracker = new web3.eth.Contract(_contracts_DonationTracker_json__WEBPACK_IMPORTED_MODULE_7__.abi, DONATION_TRACKER_ADDRESS);\n                window.web3 = web3; // Make web3 available globally for utility functions\n            } catch (contractError) {\n                console.error(\"Error initializing contracts:\", contractError);\n            }\n        }\n        return {\n            web3,\n            accounts,\n            connected: accounts.length > 0\n        };\n    } catch (error) {\n        console.error(\"Error initializing web3:\", error);\n        return {\n            web3: null,\n            accounts: [],\n            connected: false\n        };\n    }\n};\n// Check connection status\nconst checkWeb3Connection = async ()=>{\n    try {\n        const { web3, accounts } = await initWeb3();\n        if (!web3) {\n            return 'Web3 not available';\n        }\n        if (!accounts || accounts.length === 0) {\n            return 'Not connected to wallet';\n        }\n        const networkId = await web3.eth.net.getId();\n        const networkType = await web3.eth.net.getNetworkType();\n        return \"Connected to \".concat(accounts[0], \" on \").concat(networkType, \" (\").concat(networkId, \")\");\n    } catch (error) {\n        console.error(\"Connection check failed:\", error);\n        return \"Connection error: \".concat(error.message);\n    }\n};\n// Connect wallet explicitly (for connect button)\nconst connectWallet = async ()=>{\n    if ( true && window.ethereum) {\n        try {\n            // Force request account access with UI prompt\n            const result = await initWeb3(true);\n            if (!result.connected) {\n                return {\n                    success: false,\n                    error: \"User denied account access\"\n                };\n            }\n            // Check if we're on the right network\n            const networkId = await web3.eth.net.getId();\n            const networkType = await web3.eth.net.getNetworkType();\n            const expectedNetwork = \"1\" || 0;\n            const networkName = \"Ethereum Sepolia Testnet\" || 0;\n            if (networkId.toString() !== expectedNetwork) {\n                // Prompt user to switch networks\n                try {\n                    await window.ethereum.request({\n                        method: 'wallet_switchEthereumChain',\n                        params: [\n                            {\n                                chainId: \"0x\".concat(parseInt(expectedNetwork).toString(16))\n                            }\n                        ]\n                    });\n                } catch (switchError) {\n                    console.error(\"Failed to switch networks:\", switchError);\n                    return {\n                        success: false,\n                        error: \"Please switch to \".concat(networkName, \" in your wallet\")\n                    };\n                }\n            }\n            // Save connected status to localStorage\n            try {\n                localStorage.setItem('walletConnected', 'true');\n            } catch (e) {\n                console.warn('Failed to save connection state to localStorage:', e);\n            }\n            return {\n                success: true,\n                address: result.accounts[0],\n                networkId,\n                networkType\n            };\n        } catch (error) {\n            console.error(\"Failed to connect wallet:\", error);\n            return {\n                success: false,\n                error: error.message || \"Failed to connect wallet\"\n            };\n        }\n    } else {\n        return {\n            success: false,\n            error: \"No Ethereum wallet detected. Please install MetaMask.\"\n        };\n    }\n};\n// Get all active relief campaigns with verification status\nconst getReliefCampaigns = async function() {\n    let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    try {\n        await initWeb3();\n        // Get project count\n        const projectCount = await milestoneFunding.methods.projectCount().call();\n        const campaigns = [];\n        // Load all projects\n        for(let i = 0; i < projectCount; i++){\n            try {\n                const projectDetails = await milestoneFunding.methods.getProjectDetails(i).call();\n                // Only include active projects\n                if (projectDetails.isActive) {\n                    var _metadata_location;\n                    // Try to get metadata about the disaster (could be stored in IPFS or as events)\n                    let metadata = {};\n                    try {\n                        // In a production environment, we would fetch metadata from IPFS or blockchain events\n                        // For now, we'll use placeholder data\n                        const disasterType = getRandomDisasterType(i);\n                        const disasterId = \"DS-\".concat(2023, \"-\").concat(1000 + i);\n                        metadata = {\n                            disasterType: disasterType,\n                            location: getLocationForDisasterType(disasterType),\n                            disasterId: disasterId,\n                            urgencyLevel: getUrgencyForDisasterType(disasterType)\n                        };\n                        // Try to get verification from the Oracle contract\n                        try {\n                            const verification = await disasterOracle.methods.getDisasterVerification(disasterId).call();\n                            metadata.verified = verification.verified;\n                            metadata.confidence = verification.confidence;\n                            metadata.source = verification.source || \"Chainlink Oracles\";\n                        } catch (verificationError) {\n                            console.log(\"Could not get verification for disaster \".concat(disasterId), verificationError);\n                            metadata.verified = i % 3 === 0; // For testing: make every third project verified\n                            metadata.confidence = metadata.verified ? 85 : 0;\n                            metadata.source = metadata.verified ? \"Chainlink Weather Data\" : \"\";\n                        }\n                    } catch (metadataError) {\n                        console.error(\"Error fetching metadata for project \".concat(i, \":\"), metadataError);\n                    }\n                    // Apply filters if provided\n                    if (filters.disasterType && metadata.disasterType !== filters.disasterType || filters.location && !((_metadata_location = metadata.location) === null || _metadata_location === void 0 ? void 0 : _metadata_location.toLowerCase().includes(filters.location.toLowerCase())) || filters.urgency > 0 && metadata.urgencyLevel !== parseInt(filters.urgency)) {\n                        continue; // Skip this campaign if it doesn't match filters\n                    }\n                    // Get milestone information\n                    const milestones = [];\n                    for(let j = 0; j < projectDetails.milestoneCount; j++){\n                        try {\n                            const milestone = await milestoneFunding.methods.getMilestoneDetails(i, j).call();\n                            milestones.push({\n                                ...milestone,\n                                id: j\n                            });\n                        } catch (milestoneError) {\n                            console.error(\"Error fetching milestone \".concat(j, \" for project \").concat(i, \":\"), milestoneError);\n                        }\n                    }\n                    // Get NGO details\n                    let ngoDetails = {\n                        name: \"Unknown NGO\"\n                    };\n                    try {\n                        ngoDetails = await ngoRegistry.methods.getNGODetails(projectDetails.ngoAddress).call();\n                    } catch (ngoError) {\n                        console.error(\"Error fetching NGO details for address \".concat(projectDetails.ngoAddress, \":\"), ngoError);\n                    }\n                    // Add campaign to the list\n                    campaigns.push({\n                        id: i,\n                        title: projectDetails.name,\n                        description: projectDetails.description,\n                        creator: projectDetails.ngoAddress,\n                        ngoName: ngoDetails.name || \"Unknown NGO\",\n                        currentAmount: projectDetails.releasedFunding,\n                        targetAmount: projectDetails.totalFunding,\n                        milestonesCompleted: parseInt(projectDetails.milestonesCompleted),\n                        milestoneCount: parseInt(projectDetails.milestoneCount),\n                        milestones: milestones,\n                        isActive: projectDetails.isActive,\n                        deadline: calculateDeadline(i),\n                        parsedMetadata: metadata\n                    });\n                }\n            } catch (projectError) {\n                console.error(\"Error loading project \".concat(i, \":\"), projectError);\n            }\n        }\n        return campaigns;\n    } catch (error) {\n        console.error(\"Error getting relief campaigns:\", error);\n        throw error;\n    }\n};\n// Donate to a relief campaign\nconst donate = async (campaignId, amount)=>{\n    try {\n        const { web3, accounts } = await initWeb3();\n        if (!accounts || accounts.length === 0) {\n            throw new Error(\"No connected wallet accounts\");\n        }\n        const amountWei = web3.utils.toWei(amount.toString(), 'ether');\n        // Get the project details to check if it's active\n        const projectDetails = await milestoneFunding.methods.getProjectDetails(campaignId).call();\n        if (!projectDetails.isActive) {\n            throw new Error(\"This relief project is no longer active\");\n        }\n        // There's no direct donation method in MilestoneFunding in the contract code\n        // We'll use D3RProtocol to handle the donation\n        try {\n            // Try to donate via the main protocol contract\n            await d3rProtocol.methods.donateToProject(campaignId).send({\n                from: accounts[0],\n                value: amountWei\n            });\n        } catch (protocolError) {\n            console.error(\"D3RProtocol donation failed, trying direct transaction:\", protocolError);\n            // If the protocol doesn't have a donateToProject method, try a direct transaction\n            await web3.eth.sendTransaction({\n                from: accounts[0],\n                to: MILESTONE_FUNDING_ADDRESS,\n                value: amountWei,\n                data: web3.eth.abi.encodeFunctionCall({\n                    name: 'addFundsToProject',\n                    type: 'function',\n                    inputs: [\n                        {\n                            type: 'uint256',\n                            name: 'projectId'\n                        }\n                    ]\n                }, [\n                    campaignId\n                ])\n            });\n        }\n        return true;\n    } catch (error) {\n        console.error(\"Error donating to campaign:\", error);\n        throw error;\n    }\n};\n// Get verification status of a relief campaign\nconst getVerificationStatus = async (disasterId)=>{\n    try {\n        await initWeb3();\n        const verification = await disasterOracle.methods.getDisasterVerification(disasterId).call();\n        return verification;\n    } catch (error) {\n        console.error(\"Error getting verification status:\", error);\n        return {\n            verified: false,\n            confidence: 0,\n            source: \"Error retrieving data\",\n            timestamp: 0\n        };\n    }\n};\n// Get NGO details\nconst getNGODetails = async (ngoAddress)=>{\n    try {\n        await initWeb3();\n        const ngoDetails = await ngoRegistry.methods.getNGODetails(ngoAddress).call();\n        return ngoDetails;\n    } catch (error) {\n        console.error(\"Error getting NGO details:\", error);\n        return null;\n    }\n};\n// Get dashboard stats\nconst getDashboardStats = async ()=>{\n    try {\n        const { web3 } = await initWeb3();\n        // Get NGO count\n        let verifiedNGOsCount = 0;\n        try {\n            verifiedNGOsCount = await ngoRegistry.methods.getVerifiedNGOsCount().call();\n        } catch (ngoError) {\n            console.error(\"Error getting verified NGO count:\", ngoError);\n        }\n        // Get project count and calculate total funding and people helped\n        let projectCount = 0;\n        try {\n            projectCount = await milestoneFunding.methods.projectCount().call();\n        } catch (projectError) {\n            console.error(\"Error getting project count:\", projectError);\n        }\n        // Safely create a BigNumber (if web3.utils.toBN isn't available, use standard string handling)\n        let totalDonations = \"0\";\n        let totalDonationsBN;\n        try {\n            // Check if web3.utils has the toBN function\n            if (web3 && web3.utils && typeof web3.utils.toBN === 'function') {\n                totalDonationsBN = web3.utils.toBN(\"0\");\n            } else {\n                // Fallback to string-based handling\n                totalDonations = \"0\";\n            }\n        } catch (error) {\n            console.error(\"Error with BigNumber handling:\", error);\n            totalDonations = \"0\";\n        }\n        let activeCampaigns = 0;\n        let totalPeopleHelped = 0;\n        for(let i = 0; i < projectCount; i++){\n            try {\n                const projectDetails = await milestoneFunding.methods.getProjectDetails(i).call();\n                // Handle the total donations amount safely\n                try {\n                    if (totalDonationsBN) {\n                        // Use BN addition if available\n                        totalDonationsBN = totalDonationsBN.add(web3.utils.toBN(projectDetails.totalFunding));\n                    } else {\n                        // Fallback to simple string/number handling\n                        const fundingInEther = web3 && web3.utils ? web3.utils.fromWei(projectDetails.totalFunding, 'ether') : parseFloat(projectDetails.totalFunding) / 1e18;\n                        totalDonations = (parseFloat(totalDonations) + parseFloat(fundingInEther)).toString();\n                    }\n                } catch (bnError) {\n                    console.error(\"Error adding to donation total:\", bnError);\n                    // Fallback to simple addition\n                    totalDonations = (parseFloat(totalDonations) + parseFloat(projectDetails.totalFunding) / 1e18).toFixed(4);\n                }\n                if (projectDetails.isActive) {\n                    activeCampaigns++;\n                    // In a real scenario, you'd have a way to track people helped per project\n                    // For now, use a formula based on project funding and milestones\n                    const totalFundingEth = web3 && web3.utils ? parseFloat(web3.utils.fromWei(projectDetails.totalFunding, 'ether')) : parseFloat(projectDetails.totalFunding) / 1e18;\n                    const peopleHelpedEstimate = Math.floor(totalFundingEth * 150);\n                    totalPeopleHelped += peopleHelpedEstimate;\n                }\n            } catch (error) {\n                console.error(\"Error getting details for project \".concat(i, \":\"), error);\n            }\n        }\n        // Format the final totalDonations value\n        let formattedDonations;\n        if (totalDonationsBN) {\n            formattedDonations = web3.utils.fromWei(totalDonationsBN, 'ether');\n        } else {\n            // If we've been tracking in ether already, use that value\n            formattedDonations = totalDonations;\n        }\n        return {\n            totalDonations: formattedDonations,\n            activeCampaigns,\n            peopleHelped: totalPeopleHelped,\n            verifiedNGOs: parseInt(verifiedNGOsCount)\n        };\n    } catch (error) {\n        console.error(\"Error getting dashboard stats:\", error);\n        // Return dummy data as fallback\n        return {\n            totalDonations: \"0\",\n            activeCampaigns: 0,\n            peopleHelped: 0,\n            verifiedNGOs: 0\n        };\n    }\n};\n// Helper functions for generating test data\nfunction getRandomDisasterType(seed) {\n    const types = Object.values(DISASTER_TYPES);\n    return types[seed % types.length];\n}\nfunction getLocationForDisasterType(disasterType) {\n    const locations = {\n        [DISASTER_TYPES.EARTHQUAKE]: \"Port-au-Prince, Haiti\",\n        [DISASTER_TYPES.HURRICANE]: \"New Orleans, USA\",\n        [DISASTER_TYPES.FLOOD]: \"Kerala, India\",\n        [DISASTER_TYPES.WILDFIRE]: \"California, USA\",\n        [DISASTER_TYPES.DROUGHT]: \"Nairobi, Kenya\",\n        [DISASTER_TYPES.TSUNAMI]: \"Phuket, Thailand\",\n        [DISASTER_TYPES.VOLCANIC_ERUPTION]: \"Bali, Indonesia\",\n        [DISASTER_TYPES.PANDEMIC]: \"Global Response\",\n        [DISASTER_TYPES.OTHER]: \"Multiple Regions\"\n    };\n    return locations[disasterType] || \"Unknown Location\";\n}\nfunction getUrgencyForDisasterType(disasterType) {\n    const urgencies = {\n        [DISASTER_TYPES.EARTHQUAKE]: 5,\n        [DISASTER_TYPES.HURRICANE]: 4,\n        [DISASTER_TYPES.FLOOD]: 4,\n        [DISASTER_TYPES.WILDFIRE]: 3,\n        [DISASTER_TYPES.DROUGHT]: 2,\n        [DISASTER_TYPES.TSUNAMI]: 5,\n        [DISASTER_TYPES.VOLCANIC_ERUPTION]: 3,\n        [DISASTER_TYPES.PANDEMIC]: 4,\n        [DISASTER_TYPES.OTHER]: 3\n    };\n    return urgencies[disasterType] || 3;\n}\nfunction calculateDeadline(projectId) {\n    // Create deterministic but varied deadlines\n    const now = Math.floor(Date.now() / 1000);\n    const daysFromNow = 10 + projectId * 5 % 60; // Between 10 and 70 days\n    return now + daysFromNow * 24 * 60 * 60;\n}\n// Check if an NGO is verified\nconst isNGOVerified = async (ngoAddress)=>{\n    try {\n        await initWeb3();\n        const isVerified = await ngoRegistry.methods.isVerified(ngoAddress).call();\n        return isVerified;\n    } catch (error) {\n        console.error(\"Error checking if NGO is verified:\", error);\n        return false;\n    }\n};\n// Verify document on IPFS\nconst verifyIPFSDocument = async (cid)=>{\n    try {\n        const { accounts } = await initWeb3();\n        await ipfsVerifier.methods.verifyDocument(cid).send({\n            from: accounts[0]\n        });\n        return true;\n    } catch (error) {\n        console.error(\"Error verifying IPFS document:\", error);\n        throw error;\n    }\n};\n// Get contract addresses for frontend display\nconst getContractAddresses = ()=>{\n    return {\n        d3rProtocol: D3R_PROTOCOL_ADDRESS,\n        milestoneFunding: MILESTONE_FUNDING_ADDRESS,\n        ngoRegistry: NGO_REGISTRY_ADDRESS,\n        disasterOracle: DISASTER_ORACLE_ADDRESS,\n        ipfsVerifier: IPFS_VERIFIER_ADDRESS,\n        fundPool: FUND_POOL_ADDRESS,\n        donationTracker: DONATION_TRACKER_ADDRESS\n    };\n};\n// Check if wallet was previously connected\nconst checkPreviousConnection = async ()=>{\n    try {\n        // Check localStorage for previous connection\n        const wasConnected = localStorage.getItem('walletConnected') === 'true';\n        if (wasConnected) {\n            // Try to reconnect silently\n            const { connected, accounts } = await initWeb3(false);\n            if (connected) {\n                return {\n                    connected,\n                    address: accounts[0]\n                };\n            }\n        }\n        return {\n            connected: false\n        };\n    } catch (e) {\n        console.warn('Error checking previous connection:', e);\n        return {\n            connected: false\n        };\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    initWeb3,\n    getReliefCampaigns,\n    donate,\n    getVerificationStatus,\n    getNGODetails,\n    getDashboardStats,\n    isNGOVerified,\n    verifyIPFSDocument,\n    getContractAddresses,\n    DISASTER_TYPES,\n    URGENCY_LEVELS,\n    checkWeb3Connection,\n    connectWallet\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0lBQ0FzRDtJQUNBc0Q7SUFDQWtCO0lBQ0FsQztJQUNBb0M7SUFDQStCO0lBQ0FFO0lBQ0FHO0lBQ0EvSztJQUNBVTtJQUNBOEI7SUFDQU87QUFDRixDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIkM6XFxQcm9ncmFtIEZpbGVzXFxibG9ja2NoYWluLWQzclxcZnJvbnRlbmRcXHV0aWxzXFx3ZWIzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBXZWIzIGZyb20gJ3dlYjMnO1xyXG5pbXBvcnQgRDNSUHJvdG9jb2xBQkkgZnJvbSAnLi4vY29udHJhY3RzL0QzUlByb3RvY29sLmpzb24nO1xyXG5pbXBvcnQgTWlsZXN0b25lRnVuZGluZ0FCSSBmcm9tICcuLi9jb250cmFjdHMvTWlsZXN0b25lRnVuZGluZy5qc29uJztcclxuaW1wb3J0IE5HT1JlZ2lzdHJ5QUJJIGZyb20gJy4uL2NvbnRyYWN0cy9OR09SZWdpc3RyeS5qc29uJztcclxuaW1wb3J0IENoYWlubGlua0Rpc2FzdGVyT3JhY2xlQUJJIGZyb20gJy4uL2NvbnRyYWN0cy9DaGFpbmxpbmtEaXNhc3Rlck9yYWNsZS5qc29uJztcclxuaW1wb3J0IElQRlNWZXJpZmllckFCSSBmcm9tICcuLi9jb250cmFjdHMvSVBGU1ZlcmlmaWVyLmpzb24nO1xyXG5pbXBvcnQgRnVuZFBvb2xBQkkgZnJvbSAnLi4vY29udHJhY3RzL0Z1bmRQb29sLmpzb24nO1xyXG5pbXBvcnQgRG9uYXRpb25UcmFja2VyQUJJIGZyb20gJy4uL2NvbnRyYWN0cy9Eb25hdGlvblRyYWNrZXIuanNvbic7XHJcblxyXG5sZXQgd2ViMztcclxubGV0IGQzclByb3RvY29sO1xyXG5sZXQgbWlsZXN0b25lRnVuZGluZztcclxubGV0IG5nb1JlZ2lzdHJ5O1xyXG5sZXQgZGlzYXN0ZXJPcmFjbGU7XHJcbmxldCBpcGZzVmVyaWZpZXI7XHJcbmxldCBmdW5kUG9vbDtcclxubGV0IGRvbmF0aW9uVHJhY2tlcjtcclxuXHJcbi8vIENvbnRyYWN0IGFkZHJlc3NlcyAtIGRlcGxveWVkIGNvbnRyYWN0IGFkZHJlc3Nlc1xyXG5jb25zdCBEM1JfUFJPVE9DT0xfQUREUkVTUyA9ICcweEIwQzA0YkY4MWMyRDY0Y0M1QWU0Q0NlYUZlNjkwNkQzOTE0NzYzMDQnO1xyXG5jb25zdCBNSUxFU1RPTkVfRlVORElOR19BRERSRVNTID0gJzB4RDA5YzBiMTY3NzEwN2UyNUI3ODI3MWRBNzAyOTU1ODBCZjhCRUE1Mic7XHJcbmNvbnN0IE5HT19SRUdJU1RSWV9BRERSRVNTID0gJzB4OGU2NzVlNUM4ZWZGMjM5OEQ3MGVlZUU2MkJkODVBQjgwODRiOEEwMSc7XHJcbmNvbnN0IERJU0FTVEVSX09SQUNMRV9BRERSRVNTID0gJzB4MTA5NDU3ZDRjODUwMTE3NGY3NzQzMzlFNEIzNzYzNWUzZjgxOEM5NCc7XHJcbmNvbnN0IElQRlNfVkVSSUZJRVJfQUREUkVTUyA9ICcweDRERjYyN0ZDRGY2MzlENmE0ZGM0MjA5MjREZjY3MDllNDA0NDkzYzQnO1xyXG5jb25zdCBGVU5EX1BPT0xfQUREUkVTUyA9ICcweDUyMTQ2ZDQ2NGU1REQzYTcwNDY5NDBiODUyMzEwMDczODVBQjMxMDUnO1xyXG5jb25zdCBET05BVElPTl9UUkFDS0VSX0FERFJFU1MgPSAnMHg5NzE1NGFDRmE2ZjVFODU0OTREMEVGZDIzMzIzNjhiMTNiMkRhOGRjJztcclxuXHJcbi8vIERpc2FzdGVyIHR5cGVzIGRlZmluZWQgaW4gdGhlIHN5c3RlbVxyXG5leHBvcnQgY29uc3QgRElTQVNURVJfVFlQRVMgPSB7XHJcbiAgRUFSVEhRVUFLRTogJ0VhcnRocXVha2UnLFxyXG4gIEhVUlJJQ0FORTogJ0h1cnJpY2FuZScsXHJcbiAgRkxPT0Q6ICdGbG9vZCcsXHJcbiAgV0lMREZJUkU6ICdXaWxkZmlyZScsXHJcbiAgRFJPVUdIVDogJ0Ryb3VnaHQnLFxyXG4gIFRTVU5BTUk6ICdUc3VuYW1pJyxcclxuICBWT0xDQU5JQ19FUlVQVElPTjogJ1ZvbGNhbmljIEVydXB0aW9uJyxcclxuICBQQU5ERU1JQzogJ1BhbmRlbWljJyxcclxuICBPVEhFUjogJ090aGVyJ1xyXG59O1xyXG5cclxuLy8gVXJnZW5jeSBsZXZlbHMgZGVmaW5lZCBpbiB0aGUgc3lzdGVtXHJcbmV4cG9ydCBjb25zdCBVUkdFTkNZX0xFVkVMUyA9IHtcclxuICAnQ3JpdGljYWwgKExldmVsIDUpJzogNSxcclxuICAnSGlnaCAoTGV2ZWwgNCknOiA0LFxyXG4gICdNZWRpdW0gKExldmVsIDMpJzogMyxcclxuICAnTG93IChMZXZlbCAyKSc6IDIsXHJcbiAgJ1JlY292ZXJ5IChMZXZlbCAxKSc6IDFcclxufTtcclxuXHJcbi8vIEluaXRpYWxpemUgV2ViMyBhbmQgY29udHJhY3QgaW5zdGFuY2VzXHJcbmV4cG9ydCBjb25zdCBpbml0V2ViMyA9IGFzeW5jIChmb3JjZUNvbm5lY3QgPSBmYWxzZSkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBsZXQgYWNjb3VudHMgPSBbXTtcclxuICAgIFxyXG4gICAgLy8gQ2hlY2sgaWYgd2UncmUgaW4gYSBicm93c2VyIGFuZCBpZiBldGhlcmV1bSBpcyBpbmplY3RlZFxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5ldGhlcmV1bSkge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkZvdW5kIHdpbmRvdy5ldGhlcmV1bSwgYXR0ZW1wdGluZyB0byBjb25uZWN0XCIpO1xyXG4gICAgICBcclxuICAgICAgdHJ5IHtcclxuICAgICAgICAvLyBSZXF1ZXN0IGFjY291bnQgYWNjZXNzIGlmIG5lZWRlZCBvciBpZiBmb3JjZSBjb25uZWN0IGlzIHRydWVcclxuICAgICAgICBpZiAoZm9yY2VDb25uZWN0KSB7XHJcbiAgICAgICAgICBhY2NvdW50cyA9IGF3YWl0IHdpbmRvdy5ldGhlcmV1bS5yZXF1ZXN0KHsgbWV0aG9kOiAnZXRoX3JlcXVlc3RBY2NvdW50cycgfSk7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkZvcmNlZCBjb25uZWN0IGFjY291bnRzOlwiLCBhY2NvdW50cyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIEp1c3QgZ2V0IGFjY291bnRzIHdpdGhvdXQgcHJvbXB0aW5nXHJcbiAgICAgICAgICBhY2NvdW50cyA9IGF3YWl0IHdpbmRvdy5ldGhlcmV1bS5yZXF1ZXN0KHsgbWV0aG9kOiAnZXRoX2FjY291bnRzJyB9KTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ3VycmVudCBhY2NvdW50czpcIiwgYWNjb3VudHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBDcmVhdGUgV2ViMyBpbnN0YW5jZVxyXG4gICAgICAgIHdlYjMgPSBuZXcgV2ViMyh3aW5kb3cuZXRoZXJldW0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFNldCB1cCBldmVudCBsaXN0ZW5lcnMgZm9yIGFjY291bnQvbmV0d29yayBjaGFuZ2VzIGlmIHRoZXkgZG9uJ3QgZXhpc3RcclxuICAgICAgICBpZiAoIXdpbmRvdy5ldGhlcmV1bS5fZXZlbnRzIHx8ICF3aW5kb3cuZXRoZXJldW0uX2V2ZW50cy5hY2NvdW50c0NoYW5nZWQpIHtcclxuICAgICAgICAgIHdpbmRvdy5ldGhlcmV1bS5vbignYWNjb3VudHNDaGFuZ2VkJywgKG5ld0FjY291bnRzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhY2NvdW50c0NoYW5nZWQnLCBuZXdBY2NvdW50cyk7XHJcbiAgICAgICAgICAgIC8vIERpc3BhdGNoIGEgY3VzdG9tIGV2ZW50IHRoYXQgY29tcG9uZW50cyBjYW4gbGlzdGVuIGZvclxyXG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3dhbGxldEFjY291bnRDaGFuZ2VkJywgeyBkZXRhaWw6IG5ld0FjY291bnRzIH0pKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgXHJcbiAgICAgICAgICB3aW5kb3cuZXRoZXJldW0ub24oJ2NoYWluQ2hhbmdlZCcsIChjaGFpbklkKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjaGFpbkNoYW5nZWQnLCBjaGFpbklkKTtcclxuICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCd3YWxsZXRDaGFpbkNoYW5nZWQnLCB7IGRldGFpbDogY2hhaW5JZCB9KSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgd2luZG93LmV0aGVyZXVtLm9uKCdkaXNjb25uZWN0JywgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkaXNjb25uZWN0JywgZXJyb3IpO1xyXG4gICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ3dhbGxldERpc2Nvbm5lY3RlZCcpKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgcmVxdWVzdGluZyBhY2NvdW50IGFjY2VzczpcIiwgZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy53ZWIzKSB7XHJcbiAgICAgIC8vIExlZ2FjeSBzdXBwb3J0IGZvciBvbGRlciBNZXRhTWFzay9XZWIzIGltcGxlbWVudGF0aW9uc1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkZvdW5kIGxlZ2FjeSB3ZWIzXCIpO1xyXG4gICAgICB3ZWIzID0gbmV3IFdlYjMod2luZG93LndlYjMuY3VycmVudFByb3ZpZGVyKTtcclxuICAgICAgYWNjb3VudHMgPSBhd2FpdCB3ZWIzLmV0aC5nZXRBY2NvdW50cygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coXCJObyBXZWIzIHdhbGxldCBkZXRlY3RlZCwgdXNpbmcgcmVhZC1vbmx5IHByb3ZpZGVyXCIpO1xyXG4gICAgICAvLyBTZXQgdXAgYSByZWFkLW9ubHkgcHJvdmlkZXIgZm9yIG5vbi13YWxsZXQgdXNlcnNcclxuICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgV2ViMy5wcm92aWRlcnMuSHR0cFByb3ZpZGVyKFxyXG4gICAgICAgIFwiaHR0cHM6Ly9ldGgtc2Vwb2xpYS5nLmFsY2hlbXkuY29tL3YyL2RlbW9cIlxyXG4gICAgICApO1xyXG4gICAgICB3ZWIzID0gbmV3IFdlYjMocHJvdmlkZXIpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBJbml0aWFsaXplIGNvbnRyYWN0IGluc3RhbmNlcyBvbmx5IGlmIHdlYjMgaXMgc2V0dXBcclxuICAgIGlmICh3ZWIzKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgZDNyUHJvdG9jb2wgPSBuZXcgd2ViMy5ldGguQ29udHJhY3QoRDNSUHJvdG9jb2xBQkkuYWJpLCBEM1JfUFJPVE9DT0xfQUREUkVTUyk7XHJcbiAgICAgICAgbWlsZXN0b25lRnVuZGluZyA9IG5ldyB3ZWIzLmV0aC5Db250cmFjdChNaWxlc3RvbmVGdW5kaW5nQUJJLmFiaSwgTUlMRVNUT05FX0ZVTkRJTkdfQUREUkVTUyk7XHJcbiAgICAgICAgbmdvUmVnaXN0cnkgPSBuZXcgd2ViMy5ldGguQ29udHJhY3QoTkdPUmVnaXN0cnlBQkkuYWJpLCBOR09fUkVHSVNUUllfQUREUkVTUyk7XHJcbiAgICAgICAgZGlzYXN0ZXJPcmFjbGUgPSBuZXcgd2ViMy5ldGguQ29udHJhY3QoQ2hhaW5saW5rRGlzYXN0ZXJPcmFjbGVBQkkuYWJpLCBESVNBU1RFUl9PUkFDTEVfQUREUkVTUyk7XHJcbiAgICAgICAgaXBmc1ZlcmlmaWVyID0gbmV3IHdlYjMuZXRoLkNvbnRyYWN0KElQRlNWZXJpZmllckFCSS5hYmksIElQRlNfVkVSSUZJRVJfQUREUkVTUyk7XHJcbiAgICAgICAgZnVuZFBvb2wgPSBuZXcgd2ViMy5ldGguQ29udHJhY3QoRnVuZFBvb2xBQkkuYWJpLCBGVU5EX1BPT0xfQUREUkVTUyk7XHJcbiAgICAgICAgZG9uYXRpb25UcmFja2VyID0gbmV3IHdlYjMuZXRoLkNvbnRyYWN0KERvbmF0aW9uVHJhY2tlckFCSS5hYmksIERPTkFUSU9OX1RSQUNLRVJfQUREUkVTUyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgd2luZG93LndlYjMgPSB3ZWIzOyAvLyBNYWtlIHdlYjMgYXZhaWxhYmxlIGdsb2JhbGx5IGZvciB1dGlsaXR5IGZ1bmN0aW9uc1xyXG4gICAgICB9IGNhdGNoIChjb250cmFjdEVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluaXRpYWxpemluZyBjb250cmFjdHM6XCIsIGNvbnRyYWN0RXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiB7IHdlYjMsIGFjY291bnRzLCBjb25uZWN0ZWQ6IGFjY291bnRzLmxlbmd0aCA+IDAgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluaXRpYWxpemluZyB3ZWIzOlwiLCBlcnJvcik7XHJcbiAgICByZXR1cm4geyB3ZWIzOiBudWxsLCBhY2NvdW50czogW10sIGNvbm5lY3RlZDogZmFsc2UgfTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBDaGVjayBjb25uZWN0aW9uIHN0YXR1c1xyXG5leHBvcnQgY29uc3QgY2hlY2tXZWIzQ29ubmVjdGlvbiA9IGFzeW5jICgpID0+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyB3ZWIzLCBhY2NvdW50cyB9ID0gYXdhaXQgaW5pdFdlYjMoKTtcclxuICAgIFxyXG4gICAgaWYgKCF3ZWIzKSB7XHJcbiAgICAgIHJldHVybiAnV2ViMyBub3QgYXZhaWxhYmxlJztcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKCFhY2NvdW50cyB8fCBhY2NvdW50cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuICdOb3QgY29ubmVjdGVkIHRvIHdhbGxldCc7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGNvbnN0IG5ldHdvcmtJZCA9IGF3YWl0IHdlYjMuZXRoLm5ldC5nZXRJZCgpO1xyXG4gICAgY29uc3QgbmV0d29ya1R5cGUgPSBhd2FpdCB3ZWIzLmV0aC5uZXQuZ2V0TmV0d29ya1R5cGUoKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIGBDb25uZWN0ZWQgdG8gJHthY2NvdW50c1swXX0gb24gJHtuZXR3b3JrVHlwZX0gKCR7bmV0d29ya0lkfSlgO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiQ29ubmVjdGlvbiBjaGVjayBmYWlsZWQ6XCIsIGVycm9yKTtcclxuICAgIHJldHVybiBgQ29ubmVjdGlvbiBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWA7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gQ29ubmVjdCB3YWxsZXQgZXhwbGljaXRseSAoZm9yIGNvbm5lY3QgYnV0dG9uKVxyXG5leHBvcnQgY29uc3QgY29ubmVjdFdhbGxldCA9IGFzeW5jICgpID0+IHtcclxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmV0aGVyZXVtKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBGb3JjZSByZXF1ZXN0IGFjY291bnQgYWNjZXNzIHdpdGggVUkgcHJvbXB0XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGluaXRXZWIzKHRydWUpO1xyXG4gICAgICBcclxuICAgICAgaWYgKCFyZXN1bHQuY29ubmVjdGVkKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgXHJcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXHJcbiAgICAgICAgICBlcnJvcjogXCJVc2VyIGRlbmllZCBhY2NvdW50IGFjY2Vzc1wiXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gQ2hlY2sgaWYgd2UncmUgb24gdGhlIHJpZ2h0IG5ldHdvcmtcclxuICAgICAgY29uc3QgbmV0d29ya0lkID0gYXdhaXQgd2ViMy5ldGgubmV0LmdldElkKCk7XHJcbiAgICAgIGNvbnN0IG5ldHdvcmtUeXBlID0gYXdhaXQgd2ViMy5ldGgubmV0LmdldE5ldHdvcmtUeXBlKCk7XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBleHBlY3RlZE5ldHdvcmsgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19ORVRXT1JLX0lEIHx8ICcxJztcclxuICAgICAgY29uc3QgbmV0d29ya05hbWUgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19ORVRXT1JLX05BTUUgfHwgJ0V0aGVyZXVtIE1haW5uZXQnO1xyXG4gICAgICBcclxuICAgICAgaWYgKG5ldHdvcmtJZC50b1N0cmluZygpICE9PSBleHBlY3RlZE5ldHdvcmspIHtcclxuICAgICAgICAvLyBQcm9tcHQgdXNlciB0byBzd2l0Y2ggbmV0d29ya3NcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgYXdhaXQgd2luZG93LmV0aGVyZXVtLnJlcXVlc3Qoe1xyXG4gICAgICAgICAgICBtZXRob2Q6ICd3YWxsZXRfc3dpdGNoRXRoZXJldW1DaGFpbicsXHJcbiAgICAgICAgICAgIHBhcmFtczogW3sgY2hhaW5JZDogYDB4JHtwYXJzZUludChleHBlY3RlZE5ldHdvcmspLnRvU3RyaW5nKDE2KX1gIH1dLFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBjYXRjaCAoc3dpdGNoRXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gc3dpdGNoIG5ldHdvcmtzOlwiLCBzd2l0Y2hFcnJvcik7XHJcbiAgICAgICAgICByZXR1cm4geyBcclxuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsIFxyXG4gICAgICAgICAgICBlcnJvcjogYFBsZWFzZSBzd2l0Y2ggdG8gJHtuZXR3b3JrTmFtZX0gaW4geW91ciB3YWxsZXRgXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gU2F2ZSBjb25uZWN0ZWQgc3RhdHVzIHRvIGxvY2FsU3RvcmFnZVxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd3YWxsZXRDb25uZWN0ZWQnLCAndHJ1ZScpO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gc2F2ZSBjb25uZWN0aW9uIHN0YXRlIHRvIGxvY2FsU3RvcmFnZTonLCBlKTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgcmV0dXJuIHsgXHJcbiAgICAgICAgc3VjY2VzczogdHJ1ZSwgXHJcbiAgICAgICAgYWRkcmVzczogcmVzdWx0LmFjY291bnRzWzBdLFxyXG4gICAgICAgIG5ldHdvcmtJZCxcclxuICAgICAgICBuZXR3b3JrVHlwZVxyXG4gICAgICB9O1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBjb25uZWN0IHdhbGxldDpcIiwgZXJyb3IpO1xyXG4gICAgICByZXR1cm4geyBcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSwgXHJcbiAgICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfHwgXCJGYWlsZWQgdG8gY29ubmVjdCB3YWxsZXRcIiBcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHsgXHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcclxuICAgICAgZXJyb3I6IFwiTm8gRXRoZXJldW0gd2FsbGV0IGRldGVjdGVkLiBQbGVhc2UgaW5zdGFsbCBNZXRhTWFzay5cIiBcclxuICAgIH07XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gR2V0IGFsbCBhY3RpdmUgcmVsaWVmIGNhbXBhaWducyB3aXRoIHZlcmlmaWNhdGlvbiBzdGF0dXNcclxuZXhwb3J0IGNvbnN0IGdldFJlbGllZkNhbXBhaWducyA9IGFzeW5jIChmaWx0ZXJzID0ge30pID0+IHtcclxuICB0cnkge1xyXG4gICAgYXdhaXQgaW5pdFdlYjMoKTtcclxuICAgIFxyXG4gICAgLy8gR2V0IHByb2plY3QgY291bnRcclxuICAgIGNvbnN0IHByb2plY3RDb3VudCA9IGF3YWl0IG1pbGVzdG9uZUZ1bmRpbmcubWV0aG9kcy5wcm9qZWN0Q291bnQoKS5jYWxsKCk7XHJcbiAgICBjb25zdCBjYW1wYWlnbnMgPSBbXTtcclxuICAgIFxyXG4gICAgLy8gTG9hZCBhbGwgcHJvamVjdHNcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvamVjdENvdW50OyBpKyspIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBwcm9qZWN0RGV0YWlscyA9IGF3YWl0IG1pbGVzdG9uZUZ1bmRpbmcubWV0aG9kcy5nZXRQcm9qZWN0RGV0YWlscyhpKS5jYWxsKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gT25seSBpbmNsdWRlIGFjdGl2ZSBwcm9qZWN0c1xyXG4gICAgICAgIGlmIChwcm9qZWN0RGV0YWlscy5pc0FjdGl2ZSkge1xyXG4gICAgICAgICAgLy8gVHJ5IHRvIGdldCBtZXRhZGF0YSBhYm91dCB0aGUgZGlzYXN0ZXIgKGNvdWxkIGJlIHN0b3JlZCBpbiBJUEZTIG9yIGFzIGV2ZW50cylcclxuICAgICAgICAgIGxldCBtZXRhZGF0YSA9IHt9O1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gSW4gYSBwcm9kdWN0aW9uIGVudmlyb25tZW50LCB3ZSB3b3VsZCBmZXRjaCBtZXRhZGF0YSBmcm9tIElQRlMgb3IgYmxvY2tjaGFpbiBldmVudHNcclxuICAgICAgICAgICAgLy8gRm9yIG5vdywgd2UnbGwgdXNlIHBsYWNlaG9sZGVyIGRhdGFcclxuICAgICAgICAgICAgY29uc3QgZGlzYXN0ZXJUeXBlID0gZ2V0UmFuZG9tRGlzYXN0ZXJUeXBlKGkpO1xyXG4gICAgICAgICAgICBjb25zdCBkaXNhc3RlcklkID0gYERTLSR7MjAyM30tJHsxMDAwICsgaX1gO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgbWV0YWRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgZGlzYXN0ZXJUeXBlOiBkaXNhc3RlclR5cGUsXHJcbiAgICAgICAgICAgICAgbG9jYXRpb246IGdldExvY2F0aW9uRm9yRGlzYXN0ZXJUeXBlKGRpc2FzdGVyVHlwZSksXHJcbiAgICAgICAgICAgICAgZGlzYXN0ZXJJZDogZGlzYXN0ZXJJZCxcclxuICAgICAgICAgICAgICB1cmdlbmN5TGV2ZWw6IGdldFVyZ2VuY3lGb3JEaXNhc3RlclR5cGUoZGlzYXN0ZXJUeXBlKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gVHJ5IHRvIGdldCB2ZXJpZmljYXRpb24gZnJvbSB0aGUgT3JhY2xlIGNvbnRyYWN0XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgdmVyaWZpY2F0aW9uID0gYXdhaXQgZGlzYXN0ZXJPcmFjbGUubWV0aG9kcy5nZXREaXNhc3RlclZlcmlmaWNhdGlvbihkaXNhc3RlcklkKS5jYWxsKCk7XHJcbiAgICAgICAgICAgICAgbWV0YWRhdGEudmVyaWZpZWQgPSB2ZXJpZmljYXRpb24udmVyaWZpZWQ7XHJcbiAgICAgICAgICAgICAgbWV0YWRhdGEuY29uZmlkZW5jZSA9IHZlcmlmaWNhdGlvbi5jb25maWRlbmNlO1xyXG4gICAgICAgICAgICAgIG1ldGFkYXRhLnNvdXJjZSA9IHZlcmlmaWNhdGlvbi5zb3VyY2UgfHwgXCJDaGFpbmxpbmsgT3JhY2xlc1wiO1xyXG4gICAgICAgICAgICB9IGNhdGNoICh2ZXJpZmljYXRpb25FcnJvcikge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDb3VsZCBub3QgZ2V0IHZlcmlmaWNhdGlvbiBmb3IgZGlzYXN0ZXIgJHtkaXNhc3RlcklkfWAsIHZlcmlmaWNhdGlvbkVycm9yKTtcclxuICAgICAgICAgICAgICBtZXRhZGF0YS52ZXJpZmllZCA9IGkgJSAzID09PSAwOyAvLyBGb3IgdGVzdGluZzogbWFrZSBldmVyeSB0aGlyZCBwcm9qZWN0IHZlcmlmaWVkXHJcbiAgICAgICAgICAgICAgbWV0YWRhdGEuY29uZmlkZW5jZSA9IG1ldGFkYXRhLnZlcmlmaWVkID8gODUgOiAwO1xyXG4gICAgICAgICAgICAgIG1ldGFkYXRhLnNvdXJjZSA9IG1ldGFkYXRhLnZlcmlmaWVkID8gXCJDaGFpbmxpbmsgV2VhdGhlciBEYXRhXCIgOiBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGNhdGNoIChtZXRhZGF0YUVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGZldGNoaW5nIG1ldGFkYXRhIGZvciBwcm9qZWN0ICR7aX06YCwgbWV0YWRhdGFFcnJvcik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIEFwcGx5IGZpbHRlcnMgaWYgcHJvdmlkZWRcclxuICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgKGZpbHRlcnMuZGlzYXN0ZXJUeXBlICYmIG1ldGFkYXRhLmRpc2FzdGVyVHlwZSAhPT0gZmlsdGVycy5kaXNhc3RlclR5cGUpIHx8XHJcbiAgICAgICAgICAgIChmaWx0ZXJzLmxvY2F0aW9uICYmICFtZXRhZGF0YS5sb2NhdGlvbj8udG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhmaWx0ZXJzLmxvY2F0aW9uLnRvTG93ZXJDYXNlKCkpKSB8fFxyXG4gICAgICAgICAgICAoZmlsdGVycy51cmdlbmN5ID4gMCAmJiBtZXRhZGF0YS51cmdlbmN5TGV2ZWwgIT09IHBhcnNlSW50KGZpbHRlcnMudXJnZW5jeSkpXHJcbiAgICAgICAgICApIHtcclxuICAgICAgICAgICAgY29udGludWU7IC8vIFNraXAgdGhpcyBjYW1wYWlnbiBpZiBpdCBkb2Vzbid0IG1hdGNoIGZpbHRlcnNcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gR2V0IG1pbGVzdG9uZSBpbmZvcm1hdGlvblxyXG4gICAgICAgICAgY29uc3QgbWlsZXN0b25lcyA9IFtdO1xyXG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwcm9qZWN0RGV0YWlscy5taWxlc3RvbmVDb3VudDsgaisrKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgbWlsZXN0b25lID0gYXdhaXQgbWlsZXN0b25lRnVuZGluZy5tZXRob2RzLmdldE1pbGVzdG9uZURldGFpbHMoaSwgaikuY2FsbCgpO1xyXG4gICAgICAgICAgICAgIG1pbGVzdG9uZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAuLi5taWxlc3RvbmUsXHJcbiAgICAgICAgICAgICAgICBpZDogalxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChtaWxlc3RvbmVFcnJvcikge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGZldGNoaW5nIG1pbGVzdG9uZSAke2p9IGZvciBwcm9qZWN0ICR7aX06YCwgbWlsZXN0b25lRXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIC8vIEdldCBOR08gZGV0YWlsc1xyXG4gICAgICAgICAgbGV0IG5nb0RldGFpbHMgPSB7IG5hbWU6IFwiVW5rbm93biBOR09cIiB9O1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbmdvRGV0YWlscyA9IGF3YWl0IG5nb1JlZ2lzdHJ5Lm1ldGhvZHMuZ2V0TkdPRGV0YWlscyhwcm9qZWN0RGV0YWlscy5uZ29BZGRyZXNzKS5jYWxsKCk7XHJcbiAgICAgICAgICB9IGNhdGNoIChuZ29FcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBmZXRjaGluZyBOR08gZGV0YWlscyBmb3IgYWRkcmVzcyAke3Byb2plY3REZXRhaWxzLm5nb0FkZHJlc3N9OmAsIG5nb0Vycm9yKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gQWRkIGNhbXBhaWduIHRvIHRoZSBsaXN0XHJcbiAgICAgICAgICBjYW1wYWlnbnMucHVzaCh7XHJcbiAgICAgICAgICAgIGlkOiBpLFxyXG4gICAgICAgICAgICB0aXRsZTogcHJvamVjdERldGFpbHMubmFtZSxcclxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHByb2plY3REZXRhaWxzLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICBjcmVhdG9yOiBwcm9qZWN0RGV0YWlscy5uZ29BZGRyZXNzLFxyXG4gICAgICAgICAgICBuZ29OYW1lOiBuZ29EZXRhaWxzLm5hbWUgfHwgXCJVbmtub3duIE5HT1wiLFxyXG4gICAgICAgICAgICBjdXJyZW50QW1vdW50OiBwcm9qZWN0RGV0YWlscy5yZWxlYXNlZEZ1bmRpbmcsXHJcbiAgICAgICAgICAgIHRhcmdldEFtb3VudDogcHJvamVjdERldGFpbHMudG90YWxGdW5kaW5nLFxyXG4gICAgICAgICAgICBtaWxlc3RvbmVzQ29tcGxldGVkOiBwYXJzZUludChwcm9qZWN0RGV0YWlscy5taWxlc3RvbmVzQ29tcGxldGVkKSxcclxuICAgICAgICAgICAgbWlsZXN0b25lQ291bnQ6IHBhcnNlSW50KHByb2plY3REZXRhaWxzLm1pbGVzdG9uZUNvdW50KSxcclxuICAgICAgICAgICAgbWlsZXN0b25lczogbWlsZXN0b25lcyxcclxuICAgICAgICAgICAgaXNBY3RpdmU6IHByb2plY3REZXRhaWxzLmlzQWN0aXZlLFxyXG4gICAgICAgICAgICBkZWFkbGluZTogY2FsY3VsYXRlRGVhZGxpbmUoaSksXHJcbiAgICAgICAgICAgIHBhcnNlZE1ldGFkYXRhOiBtZXRhZGF0YVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGNhdGNoIChwcm9qZWN0RXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBsb2FkaW5nIHByb2plY3QgJHtpfTpgLCBwcm9qZWN0RXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBjYW1wYWlnbnM7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBnZXR0aW5nIHJlbGllZiBjYW1wYWlnbnM6XCIsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIERvbmF0ZSB0byBhIHJlbGllZiBjYW1wYWlnblxyXG5leHBvcnQgY29uc3QgZG9uYXRlID0gYXN5bmMgKGNhbXBhaWduSWQsIGFtb3VudCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB7IHdlYjMsIGFjY291bnRzIH0gPSBhd2FpdCBpbml0V2ViMygpO1xyXG4gICAgaWYgKCFhY2NvdW50cyB8fCBhY2NvdW50cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gY29ubmVjdGVkIHdhbGxldCBhY2NvdW50c1wiKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3QgYW1vdW50V2VpID0gd2ViMy51dGlscy50b1dlaShhbW91bnQudG9TdHJpbmcoKSwgJ2V0aGVyJyk7XHJcbiAgICBcclxuICAgIC8vIEdldCB0aGUgcHJvamVjdCBkZXRhaWxzIHRvIGNoZWNrIGlmIGl0J3MgYWN0aXZlXHJcbiAgICBjb25zdCBwcm9qZWN0RGV0YWlscyA9IGF3YWl0IG1pbGVzdG9uZUZ1bmRpbmcubWV0aG9kcy5nZXRQcm9qZWN0RGV0YWlscyhjYW1wYWlnbklkKS5jYWxsKCk7XHJcbiAgICBpZiAoIXByb2plY3REZXRhaWxzLmlzQWN0aXZlKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgcmVsaWVmIHByb2plY3QgaXMgbm8gbG9uZ2VyIGFjdGl2ZVwiKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gVGhlcmUncyBubyBkaXJlY3QgZG9uYXRpb24gbWV0aG9kIGluIE1pbGVzdG9uZUZ1bmRpbmcgaW4gdGhlIGNvbnRyYWN0IGNvZGVcclxuICAgIC8vIFdlJ2xsIHVzZSBEM1JQcm90b2NvbCB0byBoYW5kbGUgdGhlIGRvbmF0aW9uXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBUcnkgdG8gZG9uYXRlIHZpYSB0aGUgbWFpbiBwcm90b2NvbCBjb250cmFjdFxyXG4gICAgICBhd2FpdCBkM3JQcm90b2NvbC5tZXRob2RzLmRvbmF0ZVRvUHJvamVjdChjYW1wYWlnbklkKS5zZW5kKHtcclxuICAgICAgICBmcm9tOiBhY2NvdW50c1swXSxcclxuICAgICAgICB2YWx1ZTogYW1vdW50V2VpXHJcbiAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAocHJvdG9jb2xFcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiRDNSUHJvdG9jb2wgZG9uYXRpb24gZmFpbGVkLCB0cnlpbmcgZGlyZWN0IHRyYW5zYWN0aW9uOlwiLCBwcm90b2NvbEVycm9yKTtcclxuICAgICAgXHJcbiAgICAgIC8vIElmIHRoZSBwcm90b2NvbCBkb2Vzbid0IGhhdmUgYSBkb25hdGVUb1Byb2plY3QgbWV0aG9kLCB0cnkgYSBkaXJlY3QgdHJhbnNhY3Rpb25cclxuICAgICAgYXdhaXQgd2ViMy5ldGguc2VuZFRyYW5zYWN0aW9uKHtcclxuICAgICAgICBmcm9tOiBhY2NvdW50c1swXSxcclxuICAgICAgICB0bzogTUlMRVNUT05FX0ZVTkRJTkdfQUREUkVTUyxcclxuICAgICAgICB2YWx1ZTogYW1vdW50V2VpLFxyXG4gICAgICAgIGRhdGE6IHdlYjMuZXRoLmFiaS5lbmNvZGVGdW5jdGlvbkNhbGwoe1xyXG4gICAgICAgICAgbmFtZTogJ2FkZEZ1bmRzVG9Qcm9qZWN0JywgLy8gVGhpcyBmdW5jdGlvbiBuYW1lIGRlcGVuZHMgb24geW91ciBhY3R1YWwgY29udHJhY3QgaW1wbGVtZW50YXRpb25cclxuICAgICAgICAgIHR5cGU6ICdmdW5jdGlvbicsXHJcbiAgICAgICAgICBpbnB1dHM6IFt7IHR5cGU6ICd1aW50MjU2JywgbmFtZTogJ3Byb2plY3RJZCcgfV1cclxuICAgICAgICB9LCBbY2FtcGFpZ25JZF0pXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGRvbmF0aW5nIHRvIGNhbXBhaWduOlwiLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn07XHJcblxyXG4vLyBHZXQgdmVyaWZpY2F0aW9uIHN0YXR1cyBvZiBhIHJlbGllZiBjYW1wYWlnblxyXG5leHBvcnQgY29uc3QgZ2V0VmVyaWZpY2F0aW9uU3RhdHVzID0gYXN5bmMgKGRpc2FzdGVySWQpID0+IHtcclxuICB0cnkge1xyXG4gICAgYXdhaXQgaW5pdFdlYjMoKTtcclxuICAgIGNvbnN0IHZlcmlmaWNhdGlvbiA9IGF3YWl0IGRpc2FzdGVyT3JhY2xlLm1ldGhvZHMuZ2V0RGlzYXN0ZXJWZXJpZmljYXRpb24oZGlzYXN0ZXJJZCkuY2FsbCgpO1xyXG4gICAgcmV0dXJuIHZlcmlmaWNhdGlvbjtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdldHRpbmcgdmVyaWZpY2F0aW9uIHN0YXR1czpcIiwgZXJyb3IpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdmVyaWZpZWQ6IGZhbHNlLFxyXG4gICAgICBjb25maWRlbmNlOiAwLFxyXG4gICAgICBzb3VyY2U6IFwiRXJyb3IgcmV0cmlldmluZyBkYXRhXCIsXHJcbiAgICAgIHRpbWVzdGFtcDogMFxyXG4gICAgfTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBHZXQgTkdPIGRldGFpbHNcclxuZXhwb3J0IGNvbnN0IGdldE5HT0RldGFpbHMgPSBhc3luYyAobmdvQWRkcmVzcykgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBhd2FpdCBpbml0V2ViMygpO1xyXG4gICAgY29uc3QgbmdvRGV0YWlscyA9IGF3YWl0IG5nb1JlZ2lzdHJ5Lm1ldGhvZHMuZ2V0TkdPRGV0YWlscyhuZ29BZGRyZXNzKS5jYWxsKCk7XHJcbiAgICByZXR1cm4gbmdvRGV0YWlscztcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdldHRpbmcgTkdPIGRldGFpbHM6XCIsIGVycm9yKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIEdldCBkYXNoYm9hcmQgc3RhdHNcclxuZXhwb3J0IGNvbnN0IGdldERhc2hib2FyZFN0YXRzID0gYXN5bmMgKCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB7IHdlYjMgfSA9IGF3YWl0IGluaXRXZWIzKCk7XHJcbiAgICBcclxuICAgIC8vIEdldCBOR08gY291bnRcclxuICAgIGxldCB2ZXJpZmllZE5HT3NDb3VudCA9IDA7XHJcbiAgICB0cnkge1xyXG4gICAgICB2ZXJpZmllZE5HT3NDb3VudCA9IGF3YWl0IG5nb1JlZ2lzdHJ5Lm1ldGhvZHMuZ2V0VmVyaWZpZWROR09zQ291bnQoKS5jYWxsKCk7XHJcbiAgICB9IGNhdGNoIChuZ29FcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2V0dGluZyB2ZXJpZmllZCBOR08gY291bnQ6XCIsIG5nb0Vycm9yKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gR2V0IHByb2plY3QgY291bnQgYW5kIGNhbGN1bGF0ZSB0b3RhbCBmdW5kaW5nIGFuZCBwZW9wbGUgaGVscGVkXHJcbiAgICBsZXQgcHJvamVjdENvdW50ID0gMDtcclxuICAgIHRyeSB7XHJcbiAgICAgIHByb2plY3RDb3VudCA9IGF3YWl0IG1pbGVzdG9uZUZ1bmRpbmcubWV0aG9kcy5wcm9qZWN0Q291bnQoKS5jYWxsKCk7XHJcbiAgICB9IGNhdGNoIChwcm9qZWN0RXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdldHRpbmcgcHJvamVjdCBjb3VudDpcIiwgcHJvamVjdEVycm9yKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gU2FmZWx5IGNyZWF0ZSBhIEJpZ051bWJlciAoaWYgd2ViMy51dGlscy50b0JOIGlzbid0IGF2YWlsYWJsZSwgdXNlIHN0YW5kYXJkIHN0cmluZyBoYW5kbGluZylcclxuICAgIGxldCB0b3RhbERvbmF0aW9ucyA9IFwiMFwiO1xyXG4gICAgbGV0IHRvdGFsRG9uYXRpb25zQk47XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgLy8gQ2hlY2sgaWYgd2ViMy51dGlscyBoYXMgdGhlIHRvQk4gZnVuY3Rpb25cclxuICAgICAgaWYgKHdlYjMgJiYgd2ViMy51dGlscyAmJiB0eXBlb2Ygd2ViMy51dGlscy50b0JOID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgdG90YWxEb25hdGlvbnNCTiA9IHdlYjMudXRpbHMudG9CTihcIjBcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gRmFsbGJhY2sgdG8gc3RyaW5nLWJhc2VkIGhhbmRsaW5nXHJcbiAgICAgICAgdG90YWxEb25hdGlvbnMgPSBcIjBcIjtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHdpdGggQmlnTnVtYmVyIGhhbmRsaW5nOlwiLCBlcnJvcik7XHJcbiAgICAgIHRvdGFsRG9uYXRpb25zID0gXCIwXCI7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGxldCBhY3RpdmVDYW1wYWlnbnMgPSAwO1xyXG4gICAgbGV0IHRvdGFsUGVvcGxlSGVscGVkID0gMDtcclxuICAgIFxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9qZWN0Q291bnQ7IGkrKykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHByb2plY3REZXRhaWxzID0gYXdhaXQgbWlsZXN0b25lRnVuZGluZy5tZXRob2RzLmdldFByb2plY3REZXRhaWxzKGkpLmNhbGwoKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBIYW5kbGUgdGhlIHRvdGFsIGRvbmF0aW9ucyBhbW91bnQgc2FmZWx5XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGlmICh0b3RhbERvbmF0aW9uc0JOKSB7XHJcbiAgICAgICAgICAgIC8vIFVzZSBCTiBhZGRpdGlvbiBpZiBhdmFpbGFibGVcclxuICAgICAgICAgICAgdG90YWxEb25hdGlvbnNCTiA9IHRvdGFsRG9uYXRpb25zQk4uYWRkKHdlYjMudXRpbHMudG9CTihwcm9qZWN0RGV0YWlscy50b3RhbEZ1bmRpbmcpKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIHNpbXBsZSBzdHJpbmcvbnVtYmVyIGhhbmRsaW5nXHJcbiAgICAgICAgICAgIGNvbnN0IGZ1bmRpbmdJbkV0aGVyID0gd2ViMyAmJiB3ZWIzLnV0aWxzIFxyXG4gICAgICAgICAgICAgID8gd2ViMy51dGlscy5mcm9tV2VpKHByb2plY3REZXRhaWxzLnRvdGFsRnVuZGluZywgJ2V0aGVyJylcclxuICAgICAgICAgICAgICA6IHBhcnNlRmxvYXQocHJvamVjdERldGFpbHMudG90YWxGdW5kaW5nKSAvIDFlMTg7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0b3RhbERvbmF0aW9ucyA9IChwYXJzZUZsb2F0KHRvdGFsRG9uYXRpb25zKSArIHBhcnNlRmxvYXQoZnVuZGluZ0luRXRoZXIpKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGJuRXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhZGRpbmcgdG8gZG9uYXRpb24gdG90YWw6XCIsIGJuRXJyb3IpO1xyXG4gICAgICAgICAgLy8gRmFsbGJhY2sgdG8gc2ltcGxlIGFkZGl0aW9uXHJcbiAgICAgICAgICB0b3RhbERvbmF0aW9ucyA9IChwYXJzZUZsb2F0KHRvdGFsRG9uYXRpb25zKSArIHBhcnNlRmxvYXQocHJvamVjdERldGFpbHMudG90YWxGdW5kaW5nKSAvIDFlMTgpLnRvRml4ZWQoNCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChwcm9qZWN0RGV0YWlscy5pc0FjdGl2ZSkge1xyXG4gICAgICAgICAgYWN0aXZlQ2FtcGFpZ25zKys7XHJcbiAgICAgICAgICAvLyBJbiBhIHJlYWwgc2NlbmFyaW8sIHlvdSdkIGhhdmUgYSB3YXkgdG8gdHJhY2sgcGVvcGxlIGhlbHBlZCBwZXIgcHJvamVjdFxyXG4gICAgICAgICAgLy8gRm9yIG5vdywgdXNlIGEgZm9ybXVsYSBiYXNlZCBvbiBwcm9qZWN0IGZ1bmRpbmcgYW5kIG1pbGVzdG9uZXNcclxuICAgICAgICAgIGNvbnN0IHRvdGFsRnVuZGluZ0V0aCA9IHdlYjMgJiYgd2ViMy51dGlsc1xyXG4gICAgICAgICAgICA/IHBhcnNlRmxvYXQod2ViMy51dGlscy5mcm9tV2VpKHByb2plY3REZXRhaWxzLnRvdGFsRnVuZGluZywgJ2V0aGVyJykpXHJcbiAgICAgICAgICAgIDogcGFyc2VGbG9hdChwcm9qZWN0RGV0YWlscy50b3RhbEZ1bmRpbmcpIC8gMWUxODtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICBjb25zdCBwZW9wbGVIZWxwZWRFc3RpbWF0ZSA9IE1hdGguZmxvb3IodG90YWxGdW5kaW5nRXRoICogMTUwKTtcclxuICAgICAgICAgIHRvdGFsUGVvcGxlSGVscGVkICs9IHBlb3BsZUhlbHBlZEVzdGltYXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBnZXR0aW5nIGRldGFpbHMgZm9yIHByb2plY3QgJHtpfTpgLCBlcnJvcik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8gRm9ybWF0IHRoZSBmaW5hbCB0b3RhbERvbmF0aW9ucyB2YWx1ZVxyXG4gICAgbGV0IGZvcm1hdHRlZERvbmF0aW9ucztcclxuICAgIFxyXG4gICAgaWYgKHRvdGFsRG9uYXRpb25zQk4pIHtcclxuICAgICAgZm9ybWF0dGVkRG9uYXRpb25zID0gd2ViMy51dGlscy5mcm9tV2VpKHRvdGFsRG9uYXRpb25zQk4sICdldGhlcicpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gSWYgd2UndmUgYmVlbiB0cmFja2luZyBpbiBldGhlciBhbHJlYWR5LCB1c2UgdGhhdCB2YWx1ZVxyXG4gICAgICBmb3JtYXR0ZWREb25hdGlvbnMgPSB0b3RhbERvbmF0aW9ucztcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdG90YWxEb25hdGlvbnM6IGZvcm1hdHRlZERvbmF0aW9ucyxcclxuICAgICAgYWN0aXZlQ2FtcGFpZ25zLFxyXG4gICAgICBwZW9wbGVIZWxwZWQ6IHRvdGFsUGVvcGxlSGVscGVkLFxyXG4gICAgICB2ZXJpZmllZE5HT3M6IHBhcnNlSW50KHZlcmlmaWVkTkdPc0NvdW50KVxyXG4gICAgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdldHRpbmcgZGFzaGJvYXJkIHN0YXRzOlwiLCBlcnJvcik7XHJcbiAgICAvLyBSZXR1cm4gZHVtbXkgZGF0YSBhcyBmYWxsYmFja1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdG90YWxEb25hdGlvbnM6IFwiMFwiLFxyXG4gICAgICBhY3RpdmVDYW1wYWlnbnM6IDAsXHJcbiAgICAgIHBlb3BsZUhlbHBlZDogMCxcclxuICAgICAgdmVyaWZpZWROR09zOiAwXHJcbiAgICB9O1xyXG4gIH1cclxufTtcclxuXHJcbi8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIGdlbmVyYXRpbmcgdGVzdCBkYXRhXHJcbmZ1bmN0aW9uIGdldFJhbmRvbURpc2FzdGVyVHlwZShzZWVkKSB7XHJcbiAgY29uc3QgdHlwZXMgPSBPYmplY3QudmFsdWVzKERJU0FTVEVSX1RZUEVTKTtcclxuICByZXR1cm4gdHlwZXNbc2VlZCAlIHR5cGVzLmxlbmd0aF07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldExvY2F0aW9uRm9yRGlzYXN0ZXJUeXBlKGRpc2FzdGVyVHlwZSkge1xyXG4gIGNvbnN0IGxvY2F0aW9ucyA9IHtcclxuICAgIFtESVNBU1RFUl9UWVBFUy5FQVJUSFFVQUtFXTogXCJQb3J0LWF1LVByaW5jZSwgSGFpdGlcIixcclxuICAgIFtESVNBU1RFUl9UWVBFUy5IVVJSSUNBTkVdOiBcIk5ldyBPcmxlYW5zLCBVU0FcIixcclxuICAgIFtESVNBU1RFUl9UWVBFUy5GTE9PRF06IFwiS2VyYWxhLCBJbmRpYVwiLFxyXG4gICAgW0RJU0FTVEVSX1RZUEVTLldJTERGSVJFXTogXCJDYWxpZm9ybmlhLCBVU0FcIixcclxuICAgIFtESVNBU1RFUl9UWVBFUy5EUk9VR0hUXTogXCJOYWlyb2JpLCBLZW55YVwiLFxyXG4gICAgW0RJU0FTVEVSX1RZUEVTLlRTVU5BTUldOiBcIlBodWtldCwgVGhhaWxhbmRcIixcclxuICAgIFtESVNBU1RFUl9UWVBFUy5WT0xDQU5JQ19FUlVQVElPTl06IFwiQmFsaSwgSW5kb25lc2lhXCIsXHJcbiAgICBbRElTQVNURVJfVFlQRVMuUEFOREVNSUNdOiBcIkdsb2JhbCBSZXNwb25zZVwiLFxyXG4gICAgW0RJU0FTVEVSX1RZUEVTLk9USEVSXTogXCJNdWx0aXBsZSBSZWdpb25zXCJcclxuICB9O1xyXG4gIFxyXG4gIHJldHVybiBsb2NhdGlvbnNbZGlzYXN0ZXJUeXBlXSB8fCBcIlVua25vd24gTG9jYXRpb25cIjtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VXJnZW5jeUZvckRpc2FzdGVyVHlwZShkaXNhc3RlclR5cGUpIHtcclxuICBjb25zdCB1cmdlbmNpZXMgPSB7XHJcbiAgICBbRElTQVNURVJfVFlQRVMuRUFSVEhRVUFLRV06IDUsXHJcbiAgICBbRElTQVNURVJfVFlQRVMuSFVSUklDQU5FXTogNCxcclxuICAgIFtESVNBU1RFUl9UWVBFUy5GTE9PRF06IDQsXHJcbiAgICBbRElTQVNURVJfVFlQRVMuV0lMREZJUkVdOiAzLFxyXG4gICAgW0RJU0FTVEVSX1RZUEVTLkRST1VHSFRdOiAyLFxyXG4gICAgW0RJU0FTVEVSX1RZUEVTLlRTVU5BTUldOiA1LFxyXG4gICAgW0RJU0FTVEVSX1RZUEVTLlZPTENBTklDX0VSVVBUSU9OXTogMyxcclxuICAgIFtESVNBU1RFUl9UWVBFUy5QQU5ERU1JQ106IDQsXHJcbiAgICBbRElTQVNURVJfVFlQRVMuT1RIRVJdOiAzXHJcbiAgfTtcclxuICBcclxuICByZXR1cm4gdXJnZW5jaWVzW2Rpc2FzdGVyVHlwZV0gfHwgMztcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsY3VsYXRlRGVhZGxpbmUocHJvamVjdElkKSB7XHJcbiAgLy8gQ3JlYXRlIGRldGVybWluaXN0aWMgYnV0IHZhcmllZCBkZWFkbGluZXNcclxuICBjb25zdCBub3cgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcclxuICBjb25zdCBkYXlzRnJvbU5vdyA9IDEwICsgKHByb2plY3RJZCAqIDUpICUgNjA7IC8vIEJldHdlZW4gMTAgYW5kIDcwIGRheXNcclxuICByZXR1cm4gbm93ICsgKGRheXNGcm9tTm93ICogMjQgKiA2MCAqIDYwKTtcclxufVxyXG5cclxuLy8gQ2hlY2sgaWYgYW4gTkdPIGlzIHZlcmlmaWVkXHJcbmV4cG9ydCBjb25zdCBpc05HT1ZlcmlmaWVkID0gYXN5bmMgKG5nb0FkZHJlc3MpID0+IHtcclxuICB0cnkge1xyXG4gICAgYXdhaXQgaW5pdFdlYjMoKTtcclxuICAgIGNvbnN0IGlzVmVyaWZpZWQgPSBhd2FpdCBuZ29SZWdpc3RyeS5tZXRob2RzLmlzVmVyaWZpZWQobmdvQWRkcmVzcykuY2FsbCgpO1xyXG4gICAgcmV0dXJuIGlzVmVyaWZpZWQ7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjaGVja2luZyBpZiBOR08gaXMgdmVyaWZpZWQ6XCIsIGVycm9yKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBWZXJpZnkgZG9jdW1lbnQgb24gSVBGU1xyXG5leHBvcnQgY29uc3QgdmVyaWZ5SVBGU0RvY3VtZW50ID0gYXN5bmMgKGNpZCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB7IGFjY291bnRzIH0gPSBhd2FpdCBpbml0V2ViMygpO1xyXG4gICAgYXdhaXQgaXBmc1ZlcmlmaWVyLm1ldGhvZHMudmVyaWZ5RG9jdW1lbnQoY2lkKS5zZW5kKHsgZnJvbTogYWNjb3VudHNbMF0gfSk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIHZlcmlmeWluZyBJUEZTIGRvY3VtZW50OlwiLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn07XHJcblxyXG4vLyBHZXQgY29udHJhY3QgYWRkcmVzc2VzIGZvciBmcm9udGVuZCBkaXNwbGF5XHJcbmV4cG9ydCBjb25zdCBnZXRDb250cmFjdEFkZHJlc3NlcyA9ICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgZDNyUHJvdG9jb2w6IEQzUl9QUk9UT0NPTF9BRERSRVNTLFxyXG4gICAgbWlsZXN0b25lRnVuZGluZzogTUlMRVNUT05FX0ZVTkRJTkdfQUREUkVTUyxcclxuICAgIG5nb1JlZ2lzdHJ5OiBOR09fUkVHSVNUUllfQUREUkVTUyxcclxuICAgIGRpc2FzdGVyT3JhY2xlOiBESVNBU1RFUl9PUkFDTEVfQUREUkVTUyxcclxuICAgIGlwZnNWZXJpZmllcjogSVBGU19WRVJJRklFUl9BRERSRVNTLFxyXG4gICAgZnVuZFBvb2w6IEZVTkRfUE9PTF9BRERSRVNTLFxyXG4gICAgZG9uYXRpb25UcmFja2VyOiBET05BVElPTl9UUkFDS0VSX0FERFJFU1NcclxuICB9O1xyXG59O1xyXG5cclxuLy8gQ2hlY2sgaWYgd2FsbGV0IHdhcyBwcmV2aW91c2x5IGNvbm5lY3RlZFxyXG5leHBvcnQgY29uc3QgY2hlY2tQcmV2aW91c0Nvbm5lY3Rpb24gPSBhc3luYyAoKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIENoZWNrIGxvY2FsU3RvcmFnZSBmb3IgcHJldmlvdXMgY29ubmVjdGlvblxyXG4gICAgY29uc3Qgd2FzQ29ubmVjdGVkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3dhbGxldENvbm5lY3RlZCcpID09PSAndHJ1ZSc7XHJcbiAgICBcclxuICAgIGlmICh3YXNDb25uZWN0ZWQpIHtcclxuICAgICAgLy8gVHJ5IHRvIHJlY29ubmVjdCBzaWxlbnRseVxyXG4gICAgICBjb25zdCB7IGNvbm5lY3RlZCwgYWNjb3VudHMgfSA9IGF3YWl0IGluaXRXZWIzKGZhbHNlKTtcclxuICAgICAgXHJcbiAgICAgIGlmIChjb25uZWN0ZWQpIHtcclxuICAgICAgICByZXR1cm4geyBjb25uZWN0ZWQsIGFkZHJlc3M6IGFjY291bnRzWzBdIH07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHsgY29ubmVjdGVkOiBmYWxzZSB9O1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIGNvbnNvbGUud2FybignRXJyb3IgY2hlY2tpbmcgcHJldmlvdXMgY29ubmVjdGlvbjonLCBlKTtcclxuICAgIHJldHVybiB7IGNvbm5lY3RlZDogZmFsc2UgfTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgaW5pdFdlYjMsXHJcbiAgZ2V0UmVsaWVmQ2FtcGFpZ25zLFxyXG4gIGRvbmF0ZSxcclxuICBnZXRWZXJpZmljYXRpb25TdGF0dXMsXHJcbiAgZ2V0TkdPRGV0YWlscyxcclxuICBnZXREYXNoYm9hcmRTdGF0cyxcclxuICBpc05HT1ZlcmlmaWVkLFxyXG4gIHZlcmlmeUlQRlNEb2N1bWVudCxcclxuICBnZXRDb250cmFjdEFkZHJlc3NlcyxcclxuICBESVNBU1RFUl9UWVBFUyxcclxuICBVUkdFTkNZX0xFVkVMUyxcclxuICBjaGVja1dlYjNDb25uZWN0aW9uLFxyXG4gIGNvbm5lY3RXYWxsZXRcclxufTtcclxuIl0sIm5hbWVzIjpbIldlYjMiLCJEM1JQcm90b2NvbEFCSSIsIk1pbGVzdG9uZUZ1bmRpbmdBQkkiLCJOR09SZWdpc3RyeUFCSSIsIkNoYWlubGlua0Rpc2FzdGVyT3JhY2xlQUJJIiwiSVBGU1ZlcmlmaWVyQUJJIiwiRnVuZFBvb2xBQkkiLCJEb25hdGlvblRyYWNrZXJBQkkiLCJ3ZWIzIiwiZDNyUHJvdG9jb2wiLCJtaWxlc3RvbmVGdW5kaW5nIiwibmdvUmVnaXN0cnkiLCJkaXNhc3Rlck9yYWNsZSIsImlwZnNWZXJpZmllciIsImZ1bmRQb29sIiwiZG9uYXRpb25UcmFja2VyIiwiRDNSX1BST1RPQ09MX0FERFJFU1MiLCJNSUxFU1RPTkVfRlVORElOR19BRERSRVNTIiwiTkdPX1JFR0lTVFJZX0FERFJFU1MiLCJESVNBU1RFUl9PUkFDTEVfQUREUkVTUyIsIklQRlNfVkVSSUZJRVJfQUREUkVTUyIsIkZVTkRfUE9PTF9BRERSRVNTIiwiRE9OQVRJT05fVFJBQ0tFUl9BRERSRVNTIiwiRElTQVNURVJfVFlQRVMiLCJFQVJUSFFVQUtFIiwiSFVSUklDQU5FIiwiRkxPT0QiLCJXSUxERklSRSIsIkRST1VHSFQiLCJUU1VOQU1JIiwiVk9MQ0FOSUNfRVJVUFRJT04iLCJQQU5ERU1JQyIsIk9USEVSIiwiVVJHRU5DWV9MRVZFTFMiLCJpbml0V2ViMyIsImZvcmNlQ29ubmVjdCIsImFjY291bnRzIiwid2luZG93IiwiZXRoZXJldW0iLCJjb25zb2xlIiwibG9nIiwicmVxdWVzdCIsIm1ldGhvZCIsIl9ldmVudHMiLCJhY2NvdW50c0NoYW5nZWQiLCJvbiIsIm5ld0FjY291bnRzIiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiY2hhaW5JZCIsImVycm9yIiwiY3VycmVudFByb3ZpZGVyIiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJwcm92aWRlciIsInByb3ZpZGVycyIsIkh0dHBQcm92aWRlciIsIkNvbnRyYWN0IiwiYWJpIiwiY29udHJhY3RFcnJvciIsImNvbm5lY3RlZCIsImxlbmd0aCIsImNoZWNrV2ViM0Nvbm5lY3Rpb24iLCJuZXR3b3JrSWQiLCJuZXQiLCJnZXRJZCIsIm5ldHdvcmtUeXBlIiwiZ2V0TmV0d29ya1R5cGUiLCJtZXNzYWdlIiwiY29ubmVjdFdhbGxldCIsInJlc3VsdCIsInN1Y2Nlc3MiLCJleHBlY3RlZE5ldHdvcmsiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfTkVUV09SS19JRCIsIm5ldHdvcmtOYW1lIiwiTkVYVF9QVUJMSUNfTkVUV09SS19OQU1FIiwidG9TdHJpbmciLCJwYXJhbXMiLCJwYXJzZUludCIsInN3aXRjaEVycm9yIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImUiLCJ3YXJuIiwiYWRkcmVzcyIsImdldFJlbGllZkNhbXBhaWducyIsImZpbHRlcnMiLCJwcm9qZWN0Q291bnQiLCJtZXRob2RzIiwiY2FsbCIsImNhbXBhaWducyIsImkiLCJwcm9qZWN0RGV0YWlscyIsImdldFByb2plY3REZXRhaWxzIiwiaXNBY3RpdmUiLCJtZXRhZGF0YSIsImRpc2FzdGVyVHlwZSIsImdldFJhbmRvbURpc2FzdGVyVHlwZSIsImRpc2FzdGVySWQiLCJsb2NhdGlvbiIsImdldExvY2F0aW9uRm9yRGlzYXN0ZXJUeXBlIiwidXJnZW5jeUxldmVsIiwiZ2V0VXJnZW5jeUZvckRpc2FzdGVyVHlwZSIsInZlcmlmaWNhdGlvbiIsImdldERpc2FzdGVyVmVyaWZpY2F0aW9uIiwidmVyaWZpZWQiLCJjb25maWRlbmNlIiwic291cmNlIiwidmVyaWZpY2F0aW9uRXJyb3IiLCJtZXRhZGF0YUVycm9yIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsInVyZ2VuY3kiLCJtaWxlc3RvbmVzIiwiaiIsIm1pbGVzdG9uZUNvdW50IiwibWlsZXN0b25lIiwiZ2V0TWlsZXN0b25lRGV0YWlscyIsInB1c2giLCJpZCIsIm1pbGVzdG9uZUVycm9yIiwibmdvRGV0YWlscyIsIm5hbWUiLCJnZXROR09EZXRhaWxzIiwibmdvQWRkcmVzcyIsIm5nb0Vycm9yIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImNyZWF0b3IiLCJuZ29OYW1lIiwiY3VycmVudEFtb3VudCIsInJlbGVhc2VkRnVuZGluZyIsInRhcmdldEFtb3VudCIsInRvdGFsRnVuZGluZyIsIm1pbGVzdG9uZXNDb21wbGV0ZWQiLCJkZWFkbGluZSIsImNhbGN1bGF0ZURlYWRsaW5lIiwicGFyc2VkTWV0YWRhdGEiLCJwcm9qZWN0RXJyb3IiLCJkb25hdGUiLCJjYW1wYWlnbklkIiwiYW1vdW50IiwiRXJyb3IiLCJhbW91bnRXZWkiLCJ1dGlscyIsInRvV2VpIiwiZG9uYXRlVG9Qcm9qZWN0Iiwic2VuZCIsImZyb20iLCJ2YWx1ZSIsInByb3RvY29sRXJyb3IiLCJzZW5kVHJhbnNhY3Rpb24iLCJ0byIsImRhdGEiLCJlbmNvZGVGdW5jdGlvbkNhbGwiLCJ0eXBlIiwiaW5wdXRzIiwiZ2V0VmVyaWZpY2F0aW9uU3RhdHVzIiwidGltZXN0YW1wIiwiZ2V0RGFzaGJvYXJkU3RhdHMiLCJ2ZXJpZmllZE5HT3NDb3VudCIsImdldFZlcmlmaWVkTkdPc0NvdW50IiwidG90YWxEb25hdGlvbnMiLCJ0b3RhbERvbmF0aW9uc0JOIiwidG9CTiIsImFjdGl2ZUNhbXBhaWducyIsInRvdGFsUGVvcGxlSGVscGVkIiwiYWRkIiwiZnVuZGluZ0luRXRoZXIiLCJmcm9tV2VpIiwicGFyc2VGbG9hdCIsImJuRXJyb3IiLCJ0b0ZpeGVkIiwidG90YWxGdW5kaW5nRXRoIiwicGVvcGxlSGVscGVkRXN0aW1hdGUiLCJNYXRoIiwiZmxvb3IiLCJmb3JtYXR0ZWREb25hdGlvbnMiLCJwZW9wbGVIZWxwZWQiLCJ2ZXJpZmllZE5HT3MiLCJzZWVkIiwidHlwZXMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJsb2NhdGlvbnMiLCJ1cmdlbmNpZXMiLCJwcm9qZWN0SWQiLCJub3ciLCJEYXRlIiwiZGF5c0Zyb21Ob3ciLCJpc05HT1ZlcmlmaWVkIiwiaXNWZXJpZmllZCIsInZlcmlmeUlQRlNEb2N1bWVudCIsImNpZCIsInZlcmlmeURvY3VtZW50IiwiZ2V0Q29udHJhY3RBZGRyZXNzZXMiLCJjaGVja1ByZXZpb3VzQ29ubmVjdGlvbiIsIndhc0Nvbm5lY3RlZCIsImdldEl0ZW0iXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./utils/web3.js\n"));

/***/ })

});